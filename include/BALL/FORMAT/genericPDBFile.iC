// $Id: genericPDBFile.iC,v 1.2 1999/12/28 18:46:30 oliver Exp $

BALL_INLINE 
void GenericPDBFile::clear(int state)
{
  std::fstream::clear(state);
}
  
BALL_INLINE 
float GenericPDBFile::getVersion() const
{
  return 2.1;
}

BALL_INLINE 
void GenericPDBFile::selectModel(Index index)
{
  selected_model_ = index;
}

BALL_INLINE 
void GenericPDBFile::selectAllModels()
{
  selected_model_ = 0;
}

BALL_INLINE 
Index GenericPDBFile::getSelectedModel() const
{
  return selected_model_;
}

BALL_INLINE 
Index GenericPDBFile::getCurrentModel() const
{
  return current_model_;
}

BALL_INLINE 
char* GenericPDBFile::getRecordString()
{
  return line_buffer_;
}
  
BALL_INLINE 
const char* GenericPDBFile::getRecordString() const
{
  return line_buffer_;
}

BALL_INLINE 
Index GenericPDBFile::getRecordNumber() const
{
  return current_record_;
}

BALL_INLINE 
PDB::RecordType GenericPDBFile::getRecordType() const
{
  return current_record_type_;
}

BALL_INLINE 
const char* GenericPDBFile::getAtomName(const PDB::Atom atom_name)
{
	static String s;
	s.set(atom_name);
	s.trim();

  return s.c_str();
}
  
BALL_INLINE 
char GenericPDBFile::getAtomRemotenessIndicator(const PDB::Atom atom_name)
{
  return atom_name[2];
}
  
BALL_INLINE 
short GenericPDBFile::getAtomBranchDesignator(const PDB::Atom atom_name)
{
  return (short)atom_name[3];
}

BALL_INLINE 
Size GenericPDBFile::countRecordFields() const
{
  return record_fields_;
}

BALL_INLINE 
bool GenericPDBFile::hasFormat() const
{
  return ((GenericPDBFile *)this)->hasFormat();
}

BALL_INLINE 
bool GenericPDBFile::hasFormat(const String& s) const
{
  String str(s);

  str.toLower();
  
  return (str.compare("pdb") == 0 && hasFormat() == true);
}

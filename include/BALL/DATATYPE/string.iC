// $Id: string.iC,v 1.14 2000/07/10 23:27:13 amoll Exp $

BALL_INLINE 
bool String::operator == (const char *char_ptr) const
{
  return (bool)(compare(char_ptr) == 0);
}

BALL_INLINE 
bool String::operator != (const char *char_ptr) const
{
  return (bool)(compare(char_ptr) != 0);
}

BALL_INLINE 
bool Substring::operator == (const String& s) const
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (s.compare(bound_->c_str() + from_, 0, to_ - from_ + 1) == 0);
}

BALL_INLINE 
bool Substring::operator != (const String& s) const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (s.compare(bound_->c_str() + from_, 0, to_ - from_ + 1) != 0);
}

BALL_INLINE 
bool Substring::operator == (const char* char_ptr) const
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}
	// to prevent compiler warning:
	if ((signed)strlen(char_ptr) != (to_ - from_ +1))
	{
		return false;
	}
  return (bound_->compare(char_ptr, from_, to_ - from_ + 1) == 0);
}

BALL_INLINE 
bool Substring::operator != (const char *char_ptr) const
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}
	// to prevent compiler warning:
	if ((signed)strlen(char_ptr) != (to_ - from_ +1))
	{
		return true;
	}
  return (bound_->compare(char_ptr, from_, to_ - from_ + 1) != 0);
}

BALL_INLINE
Size Substring::size() const
{
	if (bound_ == 0)
	{
		return 0;
	}

	return (to_ - from_ + 1);
}

BALL_INLINE 
Substring::operator String() const
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  return String(bound_->c_str(), from_, to_ - from_ + 1);
}

BALL_INLINE 
void Substring::unbind()
{
  bound_ = 0;
  from_ = to_ = (Index)string::npos;
}

BALL_INLINE 
void Substring::destroy()
{
	if (bound_ != 0)
	{
	  bound_->erase(from_, to_ - from_ + 1);
	}

  unbind();
}

BALL_INLINE 
String Substring::toString() const
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  return String(bound_->c_str(), from_, to_ - from_ + 1);
}

BALL_INLINE 
Substring& Substring::bind(const String& s, Index from, Size len)
{
	s.validateRange_(from, len);

  bound_ = (String *)&s;
  from_ = from;
  to_ = from + (Index)len - 1;

  return *this;
}

BALL_INLINE 
Substring& Substring::bind(const Substring& s, Index from, Size len)
{
	s.validateRange_(from, len);

  bound_ = s.bound_;
  from 	+= s.from_;
  to_ 	 = s.from_ + (Index)len - 1;
  from_  = from;

  return *this;
}

BALL_INLINE 
void Substring::set(const String& s)
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  bound_->replace(from_, to_ - from_ + 1, s);
}

BALL_INLINE 
void Substring::set(const Substring& s)
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

	if (s.bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}

  bound_->replace(from_, to_ - from_ + 1, s.bound_->c_str() + s.from_, s.size());
}

BALL_INLINE 
void Substring::set(const char* char_ptr, Size size)
{
	if (bound_ == 0)
	{
		throw UnboundSubstring(__FILE__, __LINE__);
	}
	if (char_ptr == 0)
	{
		throw Exception::NullPointer(__FILE__, __LINE__);
	}
	if (size == 0)
	{
		throw Exception::SizeUnderflow(__FILE__, __LINE__);
	}

	if (size == string::npos)
	{
		bound_->replace(from_, to_ - from_ + 1, string(char_ptr));
	}
	else
	{
		bound_->replace(from_, to_ - from_ + 1, char_ptr, size);
	}
}

BALL_INLINE 
Substring& Substring::operator = (const String& s)
{
  set(s);
  return *this;
}

BALL_INLINE 
Substring& Substring::operator = (const Substring& s)
{
  set(s);
  return *this;
}

BALL_INLINE 
Substring& Substring::operator = (const char* char_ptr)
{
  set(char_ptr);
  return *this;
}

BALL_INLINE 
String* Substring::getBoundString()
{
  return bound_;
}

BALL_INLINE 
const String* Substring::getBoundString() const
{
  return bound_;
}

BALL_INLINE 
char* Substring::c_str()
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (char*)&(bound_->c_str()[from_]);
}

BALL_INLINE 
const char* Substring::c_str() const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
  return &(bound_->c_str()[from_]);
}

BALL_INLINE 
Index Substring::getFirstIndex() const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
  return from_;
}

BALL_INLINE 
Index Substring::getLastIndex() const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
  return to_;
}

BALL_INLINE 
char& Substring::operator [] (Index index)
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
	Size len = string::npos;
	validateRange_(index, len);

  return (*bound_)[from_ + index];
}

BALL_INLINE 
char Substring::operator [] (Index index) const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
 
	Size len = string::npos;
	validateRange_(index, len);

  return (*bound_)[from_ + index];
}

BALL_INLINE 
bool Substring::isBound() const
{
  return (bool)(bound_ != 0);
}

BALL_INLINE 
bool Substring::isEmpty() const
{
  return (bool)(bound_ == 0);
}

BALL_INLINE 
int String::compare(char c, Index from) const
{
	validateIndex_(from);
	return (c_str()[from] - c);
}

BALL_INLINE 
bool Substring::operator == (const Substring& s) const
{
  if (bound_ == 0 || s.bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
	if ((s.to_ - s.from_) != (to_ - from_))
	{
		return false;
	}
  return (bound_->compare(s.c_str() + from_, from_, to_ - from_ + 1) == 0);
}

BALL_INLINE 
bool Substring::operator != (const Substring& s) const
{
  if (bound_ == 0 || s.bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	} 
	if ((s.to_ - s.from_) != (to_ - from_))
	{
		return true;
	}
  return (bound_->compare(s.c_str() + from_, from_, to_ - from_ + 1) != 0);
}

BALL_INLINE 
bool Substring::operator == (char c) const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}
  return (bound_->compare(c, from_, to_ - from_ + 1) == 0);
}

BALL_INLINE 
bool Substring::operator != (char c) const
{
  if (bound_ == 0)
  {
    throw UnboundSubstring(__FILE__, __LINE__);
	}

  return (bound_->compare(c, from_, to_ - from_ + 1) != 0);
}

BALL_INLINE 
bool Substring::isValid() const
{
  return (bound_ != 0 && from_ >= 0 && from_ <= to_ && to_ < (Index)bound_->size()) ;
}

BALL_INLINE 
Substring& Substring::toLower()
{
	(*bound_).toLower(from_, to_ - from_);
  return *this;
}

BALL_INLINE 
Substring& Substring::toUpper()
{
	(*bound_).toUpper(from_, to_ - from_);
  return *this;
}

BALL_INLINE 
String& String::operator = (const String& s)
{
  set(s);
  return *this;
}

BALL_INLINE 
String& String::operator = (const char *char_ptr)
{
  set(char_ptr, 0);
  return *this;
}

BALL_INLINE 
String& String::operator = (std::strstream& s)
{
  set(s);
  return *this;
}

#define BALL_STRING_DEFINE_ASSIGNMENT_METHOD(Type) \
BALL_INLINE \
String& String::operator = (Type t) \
{ \
  set(t); \
\
  return *this; \
}

BALL_STRING_DEFINE_ASSIGNMENT_METHOD(char)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned char)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(short)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned short)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(int)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned int)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(long)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(unsigned long)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(float)
BALL_STRING_DEFINE_ASSIGNMENT_METHOD(double)

#undef BALL_STRING_DEFINE_ASSIGNMENT_METHOD

BALL_INLINE 
void String::setCompareMode(CompareMode mode)
{
  compare_mode_ = mode;
}

BALL_INLINE 
String::CompareMode String::getCompareMode()
{
  return compare_mode_;
}

BALL_INLINE 
char String::toChar() const
{
  return *c_str();
}

BALL_INLINE 
unsigned char String::toUnsignedChar() const
{
  return (unsigned char)*c_str();
}

BALL_INLINE 
short String::toShort() const
{
	errno = 0;
  short s = (short)atoi(c_str());

	if (errno == ERANGE)
	{
		throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return s;
}

BALL_INLINE 
unsigned short String::toUnsignedShort() const
{
	errno = 0;
  unsigned short us = (unsigned short)atoi(c_str());

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return us;
}

BALL_INLINE
int String::toInt() const
{
	errno = 0;
  int i = atoi(c_str());

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return i;
}

BALL_INLINE 
unsigned int String::toUnsignedInt() const
{
	errno = 0;
  unsigned int ui = (unsigned int)strtoul(c_str(), (char **)0, 10);

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return ui;
}

BALL_INLINE 
long String::toLong() const
{
	errno = 0;
  long l = atol(c_str());

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return l;
}

BALL_INLINE 
unsigned long String::toUnsignedLong() const
{
	errno = 0;
  unsigned long ul = strtoul(c_str(), (char **)0, 10);

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return ul;
}

BALL_INLINE 
float String::toFloat() const
{
	errno = 0;
  float f = (float)atof(c_str());

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return f;
}

BALL_INLINE 
double String::toDouble() const
{
	errno = 0;
  double d = atof(c_str());

  if (errno == ERANGE)
	{
    throw Exception::InvalidFormat(__FILE__, __LINE__);
	}
  
  return d;
}

BALL_INLINE 
Substring String::getSubstring(Index from, Size len) const
{
	validateRange_(from, len);
  return Substring(*this, from, len);
}

BALL_INLINE 
Substring String::operator () (Index from, Size len) const
{
  return getSubstring(from, len);
}

BALL_INLINE 
Substring String::before(const String& s, Index from) const
{
	Position found = npos;
	if (s != "")
		found = find(s, from);

	if (found == 0 || found == npos) 
		return Substring(*this, 0, 0);

	return getSubstring(0, found);
}

BALL_INLINE 
Substring String::through (const String& s, Index from) const
{
	Position found = npos;
	if (s != "")
		found = find(s, from); 

	if (found == npos) 
		return Substring(*this, 0, 0);

  return getSubstring(0, found + s.size());
}

BALL_INLINE 
Substring String::from(const String& s, Index from) const
{
	if (s == "")
	{
		return getSubstring(0);
	}

  Size found = find(s, from); 

	if (found == npos)
	{
		return Substring(*this, -1, 0);
	}
	
	return getSubstring((Index)found);
}

BALL_INLINE 
Substring String::after(const String& s, Index from) const
{
	if (s == "")
	{
		return getSubstring(0);
	}

  Position found = find(s, from); 

	if ((found == npos) || (found + s.size() >= size()))
	{
		return Substring(*this, -1, 0);
	}

  return getSubstring((Index)found + (Index)s.size());
}

BALL_INLINE 
String& String::trim(const char* trimmed)
{
  trimLeft(trimmed);
  return trimRight(trimmed).trimLeft(trimmed);
}

BALL_INLINE 
String& String::truncate(Size max_size)
{
  if (max_size < size())
    resize(max_size);
	
	return *this;
}

BALL_INLINE 
Substring String::left(Size len) const
{
	if (len > size())
		len = size();

  return Substring(*this, 0, len);
}

BALL_INLINE 
Substring String::right(Size len) const
{
	// to save calls to size()
	Size s = size();
	if (len > s) 
		len = s;

	Index from = (Index)s - (Index)len;

	if (len > 0) 
	{
	  from = (Index)s - (Index)len;
	}	else {
		if (s > 0)
		{
			from = (Index)s - 1;
		} else {
			from = 0;
		}
	}
	
	return Substring(*this, from, len);
}

BALL_INLINE 
Substring String::instr(const String& patterns, Index from) const
{
  Size found = find(patterns, from); 

  return (found == npos)
         ? Substring(*this, 0, 0)
         : Substring(*this, (Index)found, patterns.size());
}

BALL_INLINE 
String String::operator + (const string& s) const
{
  String result(*this);
  result.append(s);
  return result;
}

BALL_INLINE 
String String::operator +(const char* char_ptr) const
{
  String result(*this);
  result.append(char_ptr);
  return result;
}

BALL_INLINE 
String String::operator + (char c) const
{
  String result(*this);
  result.append(1, c);
  return result;
}

BALL_INLINE 
void String::destroy()
{
  assign("");
}

BALL_INLINE 
bool String::has(char c) const
{
  return (bool)((c != 0) && (find(c, 0) != npos));
}

BALL_INLINE 
bool String::hasSubstring(const String& s, Index from) const
{
	if (s.size() == 0)
		return true;

  return (bool)(find(s, from) != npos);
}

BALL_INLINE 
bool String::isEmpty() const
{
  return (bool)(size() == 0);
}

BALL_INLINE 
bool String::isAlpha(char c)
{
	return (bool)((c != 0) && ((char*)strchr(CHARACTER_CLASS__ASCII_ALPHA, c) != 0));
}

BALL_INLINE 
bool String::isAlnum(char c)
{
	return (bool)((c != 0) && ((char*)strchr(CHARACTER_CLASS__ASCII_ALPHANUMERIC, c) != 0));
}

BALL_INLINE 
bool String::isDigit(char c)
{
  return (bool)((c != 0) && ((char*)strchr(CHARACTER_CLASS__ASCII_NUMERIC, c) != 0));
}

BALL_INLINE 
bool String::isSpace(char c)
{
  return (bool)(c == ' ');
}

BALL_INLINE 
bool String::isWhitespace(char c)
{
  return (bool)((c != 0) && ((char*)strchr(CHARACTER_CLASS__WHITESPACE, c) != 0));
}

BALL_INLINE 
bool String::operator != (const String& s) const
{
  return (bool)(compare(s) != 0);
}

BALL_INLINE 
bool String::operator < (const String& s) const
{
  return (bool)(compare(s) < 0);
}

BALL_INLINE 
bool String::operator <= (const String& s) const
{
  return (bool)(compare(s) <= 0);
}

BALL_INLINE 
bool String::operator >= (const String& s) const
{
  return (bool)(compare(s) >= 0);
}

BALL_INLINE 
bool String::operator > (const String& s) const
{
  return (bool)(compare(s) > 0);
}

BALL_INLINE
bool String::operator == (const String& string) const
{
	return (bool)(compare(string.c_str()) == 0);
}

BALL_INLINE 
bool String::operator < (const char *char_ptr) const
{
  return (bool)(compare(char_ptr) < 0);
}

BALL_INLINE
bool String::operator <= (const char *char_ptr) const
{
  return (bool)(compare(char_ptr) <= 0);
}

BALL_INLINE 
bool String::operator >= (const char *char_ptr) const
{
  return (bool)(compare(char_ptr) >= 0);
}

BALL_INLINE 
bool String::operator > (const char *char_ptr) const
{
  return (bool)(compare(char_ptr) > 0);
}

BALL_INLINE 
bool String::operator == (char c) const
{
  return (bool)(compare(c) == 0);
}

BALL_INLINE 
bool String::operator != (char c) const
{
  return (bool)(compare(c) != 0);
}

BALL_INLINE 
bool String::operator < (char c) const
{
  return (bool)(compare(c) < 0);
}

BALL_INLINE 
bool String::operator <= (char c) const
{
  return (bool)(compare(c) <= 0);
}

BALL_INLINE 
bool String::operator >= (char c) const
{
  return (bool)(compare(c) >= 0);
}

BALL_INLINE 
bool String::operator > (char c) const
{
  return (bool)(compare(c) > 0);
}

BALL_INLINE 
bool String::isValid() const
{
  return (bool)(c_str() != 0 && size() <= capacity()); 
}

BALL_INLINE 
::std::istream& String::getline(::std::istream& s,  char delimiter)
{
	static char line_buffer[8192];
  s.getline(line_buffer, 8191, delimiter);
	set(line_buffer);
	
	return s;
}

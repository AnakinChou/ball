// $Id: bitVector.iC,v 1.11 2000/07/29 18:02:57 amoll Exp $

BALL_INLINE
BitVector::BlockType BitVector::mask_(Index index) const
{
	return (1 << (index & BALL_BLOCK_MASK));
}

BALL_INLINE 
void BitVector::clear()
{
  fill(false);
}

BALL_INLINE 
BitVector& BitVector::operator = (const BitVector& bit_vector)
{
  set(bit_vector);
  return *this;
}

BALL_INLINE 
BitVector& BitVector::operator = (const char* bit_string)
{
  set(bit_string);
  return *this;
}

BALL_INLINE 
void BitVector::get(BitVector& bit_vector, bool deep) const
{
  bit_vector.set(*this, deep);
}

BALL_INLINE 
BALL::Size BitVector::getSize() const
{
  return size_;
}

BALL_INLINE 
BALL::BitVector::BlockType* BitVector::getBitSet()
{
  return bitset_;
}

BALL_INLINE 
const BALL::BitVector::BlockType* BitVector::getBitSet() const
{
  return bitset_;
}

BALL_INLINE 
BitVector BitVector::operator | (const BitVector& bit_vector)
{
  BitVector temp(*this);
  temp.bitwiseOr(bit_vector);
  return temp;
}

BALL_INLINE 
BitVector& BitVector::operator |= (const BitVector &bit_vector)
{
  bitwiseOr(bit_vector);
  return *this;
}

BALL_INLINE 
BitVector BitVector::operator & (const BitVector& bit_vector)
{
  BitVector temp(*this);
  temp.bitwiseAnd(bit_vector);
  return temp;
}

BALL_INLINE 
BitVector& BitVector::operator &= (const BitVector &bit_vector)
{
  bitwiseAnd(bit_vector);
  return *this;
}

BALL_INLINE 
BitVector BitVector::operator ^ (const BitVector& bit_vector)
{
  BitVector temp(*this);
  temp.bitwiseXor(bit_vector);
  return temp;
}

BALL_INLINE 
BitVector& BitVector::operator ^= (const BitVector &bit_vector)
{
  bitwiseXor(bit_vector);
  return *this;
}

BALL_INLINE 
BitVector BitVector::operator ~ ()
{
  BitVector temp(*this);
  temp.toggle();
  return temp;
}

BALL_INLINE 
bool BitVector::operator != (const BitVector &bit_vector) const
{
  return (bool)!(*this == bit_vector);
}

BALL_INLINE 
bool BitVector::isValid() const
{
  return (bitset_ != 0);
}

BALL_INLINE
Bit BitVector::operator [] (Index index)
{
	block_(index);
	return Bit(*this, index);
}

BALL_INLINE
bool BitVector::getBit(Index index)
{
	validateIndex_(index);
	return (bool)((bitset_[block_(index)] & mask_(index)) != 0);
}

BALL_INLINE
bool BitVector::getBit(Index index) const
{
	validateIndex_(index);
	BitVector* const  const_this = const_cast<BitVector *>(this);
	return const_this->getBit(index);
}

BALL_INLINE
bool BitVector::operator [] (Index index) const
{
	return getBit(index);
}
 
BALL_INLINE
void BitVector::setBit(Index index, bool value)
{
	validateIndex_(index);

	if (value == true)
	{
		bitset_[block_(index)] |= mask_(index);
	} else {
		bitset_[block_(index)] &= ~mask_(index);
	}
}

BALL_INLINE
void BitVector::toggleBit(Index index)
{
	validateIndex_(index);
	bitset_[block_(index)] ^= mask_(index);
}

BALL_INLINE
bool Bit::operator == (bool bit) const
{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);
	
	return bitvector_->getBit(index_) == bit;
}

BALL_INLINE
bool Bit::operator != (bool bit) const
{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);
	
	return bitvector_->getBit(index_) != bit;
}

BALL_INLINE
bool Bit::operator == (const Bit& bit) const
{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);

	return bitvector_->getBit(index_) == bit.bitvector_->getBit(index_);
}

BALL_INLINE
bool Bit::operator != (const Bit& bit) const
{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);

	return bitvector_->getBit(index_) != bit.bitvector_->getBit(index_);
}

BALL_INLINE
Bit::operator bool() const
{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);

	return bitvector_->getBit(index_);
}

BALL_INLINE
Bit& Bit::operator = (const Bit& bit)	{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);

	bitvector_ = bit.bitvector_;
	index_ = bit.index_;
	return *this;
}

BALL_INLINE
Bit& Bit::operator = (const bool bit)
{
	if (bitvector_ == 0)
		throw Exception::NullPointer(__FILE__, __LINE__);

	bitvector_->setBit(index_, bit);
	return *this;
}

// $Id: bitVector.iC,v 1.4 1999/12/17 11:16:20 oliver Exp $

BALL_INLINE 
void BitVector::clear()
{
  fill(false);
}

BALL_INLINE 
BitVector& BitVector::operator = (const BitVector& bit_vector)
{
  set(bit_vector);

  return *this;
}

BALL_INLINE 
BitVector& BitVector::operator = (const char* bit_string)
{
  set(bit_string);

  return *this;
}

BALL_INLINE 
void BitVector::get(BitVector& bit_vector, bool deep) const
{
  bit_vector.set(*this, deep);
}

BALL_INLINE 
BALL::Size BitVector::getSize() const
{
  return size_;
}

BALL_INLINE 
BALL::Index BitVector::getMaxIndex() const
{
  return (Index)size_ - 1;
}
  
BALL_INLINE 
BALL::BitVector::BlockType* BitVector::getBitSet()
{
  return bitset_;
}

BALL_INLINE 
const BALL::BitVector::BlockType* BitVector::getBitSet() const
{
  return bitset_;
}

BALL_INLINE 
BitVector BitVector::operator | (const BitVector& bit_vector)
{
  BitVector temp(*this);

  temp.or(bit_vector);

  return temp;
}

BALL_INLINE 
BitVector& BitVector::operator |= (const BitVector &bit_vector)
{
  or(bit_vector);

  return *this;
}

BALL_INLINE 
BitVector BitVector::operator & (const BitVector& bit_vector)
{
  BitVector temp(*this);

  temp.and(bit_vector);

  return temp;
}

BALL_INLINE 
BitVector& BitVector::operator &= (const BitVector &bit_vector)
{
  and(bit_vector);

  return *this;
}

BALL_INLINE 
BitVector BitVector::operator ^ (const BitVector& bit_vector)
{
  BitVector temp(*this);

  temp.xor(bit_vector);

  return temp;
}

BALL_INLINE 
BitVector& BitVector::operator ^= (const BitVector &bit_vector)
{
  xor(bit_vector);

  return *this;
}

BALL_INLINE 
BitVector BitVector::operator ~ ()
{
  BitVector temp(*this);

  temp.toggle();

  return temp;
}

BALL_INLINE 
bool BitVector::operator != (const BitVector &bit_vector) const
{
  return (bool)!(*this == bit_vector);
}

BALL_INLINE 
bool BitVector::isValid() const
{
  return (bitset_ != 0);
}

BALL_INLINE
Bit BitVector::operator [] (Index index)
{
	block_(index);

	return Bit(*this, index);
}

BALL_INLINE
bool BitVector::operator [] (Index index) const
{
	validateIndex_(index);

	return ((BitVector *)this)->getBit(index);
}
 
BALL_INLINE
void BitVector::setBit(Index index, bool value)
{
	validateIndex_(index);

	if (value == true)
	{
		bitset_[block_(index)] |= mask_(index);
	} else {
		bitset_[block_(index)] &= ~mask_(index);
	}
}

BALL_INLINE
bool BitVector::getBit(Index index) const
{
	validateIndex_(index);

	BitVector* const  const_this = const_cast<BitVector *>(this);

	return const_this->getBit(index);
}

BALL_INLINE
bool BitVector::getBit(Index index)
{
	return (bool)((bitset_[block_(index)] & mask_(index)) != 0);
}

BALL_INLINE
void BitVector::toggleBit(Index index)
{
	validateIndex_(index);

	bitset_[block_(index)] ^= mask_(index);
}

BALL_INLINE
BitVector::BlockType BitVector::mask_(Index index) const
{
	return (1 << (index & BALL_BLOCK_MASK));
}
 

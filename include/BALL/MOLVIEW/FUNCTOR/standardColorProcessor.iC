// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: standardColorProcessor.iC,v 1.2 2003/08/26 08:04:37 oliver Exp $

BALL_INLINE
void AtomChargeColorProcessor::setPositiveColor(const ColorRGBA& color)
  throw()
{
	positive_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomChargeColorProcessor::getPositiveColor() const
  throw()
{
	return positive_color_;
}

BALL_INLINE
void AtomChargeColorProcessor::setNeutralColor(const ColorRGBA& color)
  throw()
{
	neutral_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomChargeColorProcessor::getNeutralColor() const
  throw()
{
	return neutral_color_;
}

BALL_INLINE
void AtomChargeColorProcessor::setNegativeColor(const ColorRGBA& color)
  throw()
{
	negative_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomChargeColorProcessor::getNegativeColor() const
  throw()
{
	return negative_color_;
}

BALL_INLINE
void AtomDistanceColorProcessor::setDistance(float distance)
  throw()
{
	distance_ = distance;
}

BALL_INLINE
float AtomDistanceColorProcessor::getDistance() const
  throw()
{
	return distance_;
}

BALL_INLINE
void AtomDistanceColorProcessor::setNullDistanceColor(const ColorRGBA& color)
  throw()
{
	null_distance_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomDistanceColorProcessor::getNullDistanceColor() const
  throw()
{
	return null_distance_color_;
}

BALL_INLINE
void AtomDistanceColorProcessor::setMaxDistanceColor(const ColorRGBA& color)
  throw()
{
	full_distance_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomDistanceColorProcessor::getMaxDistanceColor() const
  throw()
{
	return full_distance_color_;
}


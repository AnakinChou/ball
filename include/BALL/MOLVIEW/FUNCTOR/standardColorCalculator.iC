// $Id: standardColorCalculator.iC,v 1.3 2001/05/13 14:55:23 hekl Exp $

BALL_INLINE
void AtomChargeColorCalculator::setPositiveColor(const ColorRGBA& color)
  throw()
{
	positive_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomChargeColorCalculator::getPositiveColor() const
  throw()
{
	return positive_color_;
}

BALL_INLINE
void AtomChargeColorCalculator::setNeutralColor(const ColorRGBA& color)
  throw()
{
	neutral_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomChargeColorCalculator::getNeutralColor() const
  throw()
{
	return neutral_color_;
}

BALL_INLINE
void AtomChargeColorCalculator::setNegativeColor(const ColorRGBA& color)
  throw()
{
	negative_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomChargeColorCalculator::getNegativeColor() const
  throw()
{
	return negative_color_;
}



BALL_INLINE
void AtomDistanceColorCalculator::setDistance(float distance)
  throw()
{
	distance_ = distance;
}

BALL_INLINE
float AtomDistanceColorCalculator::getDistance() const
  throw()
{
	return distance_;
}

BALL_INLINE
void AtomDistanceColorCalculator::setNullDistanceColor(const ColorRGBA& color)
  throw()
{
	null_distance_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomDistanceColorCalculator::getNullDistanceColor() const
  throw()
{
	return null_distance_color_;
}

BALL_INLINE
void AtomDistanceColorCalculator::setMaxDistanceColor(const ColorRGBA& color)
  throw()
{
	full_distance_color_ = color;
}

BALL_INLINE
const ColorRGBA& AtomDistanceColorCalculator::getMaxDistanceColor() const
  throw()
{
	return full_distance_color_;
}


// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: molview.doc,v 1.11 2003/08/26 08:04:29 oliver Exp $
//

/**@name MOLVIEW.
	 Contrary to the VIEW framework that is designed to visualize various geometric objects
	 the MOLVIEW framework implements the visualization of molecular data structures.
	 To achieve this goal a number of processors are introduced that are responsible
	 for creating different graphical representation of given molecular structures.
	 Similar processors are used to color the created graphical models. See \Ref{ColorCalculator}.\\
	 The following processors for creating models are now available:\\
	 \begin{itemize}
		 \item \Ref{AddBallAndStickModel}: creates a ball and stick model from a given molecular structure
		 \item \Ref{AddLineModel}: creates a line model model from a given molecular structure
		 \item \Ref{AddVanDerWaalsModel}: creates a Van Der Waals model from a given molecular structure
		 \item \Ref{AddBackboneModel}: creates a backbone model through the {\em CA}-atoms of a given molecular structure
		 \item \Ref{AddSurfaceModel}: creates a surface model from a given molecular structure
	 \end{itemize}
	 All these processors are used in the class \Ref{DisplayProperties} to change the graphical
	 representation of molecular data structures.
	 This framework uses also specialized versions of serveral VIEW widgets to display and manipulate
	 molecular data structures (e.g. \Ref{MolecularControl}). 
	 Also there are some new modular widgets that are used for
	 loading molecular structures (e.g. \Ref{OpenPDBFile} or \Ref{OpenHINFile}) and for changing
	 the graphical representation (\Ref{DisplayProperties}).\\ \\
	 The following code is an example for a simple PDB viewer (the includes have been omitted).\\ \\
	 \begin{verbatim}
	 int main(int argc, char **argv)
	 {
		 // creating mainframe and application
		 QApplication app(argc, argv);
		 MainControl main;
		 app.setMainWidget(&main);

		 // create a QSplitter for dividing the main window into two
		 // sub windows used for displaying both the control and the scene
		 QSplitter *splitter = new QSplitter(&main);
		 main.setCentralWidget(splitter);

		 // create the MolecularControl and insert it into the splitter
		 new MolecularControl(splitter);

		 // create the scene and insert it into the splitter
		 new Scene(splitter);

		 // create the dialog needed for loading PDB files
		 new OpenPDBFile(&main);

		 // create the dialog needed for changing the graphical representation
		 // of molecular structures
		 new DisplayProperties(&main);

		 // create the widget needed for applying molecular properties 
		 // to loaded molecular structures
		 new MolecularProperties(&main);

		 // start the application
		 main.show();
		 return app.exec();
	 }
	 \endcode
	 
	 This example program opens a main window with both the \link MolecularControl MolecularControl \endlink
	 and the \link Scene Scene \endlink as its only widgets. Because all created objects are
	 derived from \link ModularWidget ModularWidget \endlink the menu structure and the conncectivity
	 between the inserted widgets is already build. The menu entry
	 <tt> File-Import-PDB </tt> opens the file dialog for loading pdb files.
	 If such a file is loaded the widget \link MolecularProperties MolecularProperties \endlink applies
	 certain molecular properties to it (such as build bonds, normalize name, etc.)
	 after that has occured the \link DisplayProperties DisplayProperties \endlink dialog will generate
	 a graphical representation for the molecular structure and then it
	 will be displayed in both the \link MolecularControl MolecularControl \endlink and the \link Scene Scene \endlink. <br /> <br />
	 For more information about QT widgets and application programming see
	 the documentation of the QT-library.
*/
//@{
	
	/** @name Common data.
      Some overall used data is defined in this section.
  */
	//@{
		//@Include: COMMON/common.doc
	//@}

	/** @name Functors.
 	    In this section some usefull visitors and processors are defined.
	*/
	//@{
	  //@Include: FUNCTOR/functor.doc
	//@}


	/** @name Dialog classes.
						This section contains some useful dialogs used in the demo
						application {\tt MOLVIEW}.
	*/
	//@{
		//@Include: DIALOGS/dialogs.doc
	//@}

	/**@name	Widget classes.
						This section contains some predefined widgets that are used
						in the MOLVIEW application.
	*/
	//@{
		//@Include: WIDGETS/widgets.doc
	//@}

/**@name	Predefined primitives with graphical representation.
	/** @name Kernel classes.
      The class {\em MolecularMessage} and the various derived classes define
      some useful messages for special events.
	*/
	//@{
		//@Include: KERNEL/kernel.doc
	//@}

//@}

// $Id: file.iC,v 1.1 1999/08/26 07:53:20 oliver Exp $

BALL_INLINE 
void File::enableProtocol(File::Protocol protocol)
{
  BALL_BIT_SET(protocol_ability_, protocol);
}

BALL_INLINE
void File::disableProtocol(File::Protocol protocol)
{
  BALL_BIT_CLEAR(protocol_ability_, protocol);
}

BALL_INLINE 
const String& File::getName(void) const
{
  return name_;
}

BALL_INLINE 
const String& File::getOriginalName(void) const
{
  return original_name_;
}

BALL_INLINE 
int File::getOpenMode(void) const
{
  return open_mode_;
}
  
BALL_INLINE 
File::Type File::getType(bool trace_link) const
{
  return File::getType(name_, trace_link);
}

BALL_INLINE 
fstream& File::getFileStream(void)
{
  return *this;
}

BALL_INLINE 
bool File::copyTo(const String& destination_name, Size buffer_size)
{
  return File::copy
    (name_, destination_name, buffer_size);
}

BALL_INLINE 
bool File::remove(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::unlink(name.c_str()) == 0);
}

BALL_INLINE 
bool File::remove(void) const
{
  return File::remove(name_);
}

BALL_INLINE 
bool File::move(const String& source_name, const String& destination_name)
{
  return (File::copy(source_name, destination_name) == true && File::remove(source_name) == true);
}

BALL_INLINE 
bool File::moveTo(const String& destination_name)
{
  return File::move(name_, destination_name);
}


BALL_INLINE 
bool File::rename(String old_path, String new_path)
{
  FileSystem::canonizePath(old_path);
  FileSystem::canonizePath(new_path);
  
  return (bool)(::rename(old_path.c_str(), new_path.c_str()) == 0);
}

BALL_INLINE 
bool File::renameTo(const String& new_path) const
{
  return File::rename(name_, new_path);
}

BALL_INLINE 
bool File::truncate(String path, Size size)
{
  FileSystem::canonizePath(path);
  
  return (bool)(::truncate(path.c_str(), size) == 0);
}

BALL_INLINE 
bool File::truncate(Size size) const
{
  return File::truncate(name_, size);
}

BALL_INLINE 
void File::registerAction(const String& pattern, const String& exec)
{
  action_manager_.registerAction(pattern, exec);
}
    
BALL_INLINE 
void File::unregisterAction(const String& pattern)
{
  action_manager_.unregisterAction(pattern);
}

BALL_INLINE 
bool File::operator == (const File &file) const
{
  return (bool)(name_ == file.name_);
}

BALL_INLINE 
bool File::operator != (const File &file) const
{
  return (bool)(name_ != file.name_);
}

BALL_INLINE 
bool File::isProtocolEnabled(File::Protocol protocol)
{
  return (bool)(BALL_BIT_IS_SET(protocol_ability_, protocol));
}

BALL_INLINE 
bool File::isValid(void) const
{
  return (bool)((File *)this)->fstream::good();
}

BALL_INLINE 
bool File::isOpen(void) const
{
  return is_open_;
}

BALL_INLINE 
bool File::isClosed(void) const
{
  return (bool)!is_open_;
}

BALL_INLINE 
bool File::isAccessible(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), F_OK) == 0);
}

BALL_INLINE 
bool File::isAccessible(void) const
{
  return File::isAccessible(name_);
}

BALL_INLINE 
bool File::isCanonized(void) const
{
  String canonized_name(original_name_);

  FileSystem::canonizePath(canonized_name);
  
  return (bool)(original_name_ == canonized_name);
}

BALL_INLINE 
bool File::isReadable(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), R_OK) == 0);
}

BALL_INLINE 
bool File::isReadable(void) const
{
  return File::isReadable(name_);
}

BALL_INLINE 
bool File::isWritable(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), W_OK) == 0);
}

BALL_INLINE 
bool File::isWritable(void) const
{
  return File::isWritable(name_);
}

BALL_INLINE 
bool File::isExecutable(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), X_OK) == 0);
}

BALL_INLINE 
bool File::isExecutable(void) const
{
  return File::isExecutable(name_);
}

BALL_INLINE 
bool File::hasFormat(void)
{
  return true;
}

BALL_INLINE 
bool File::hasFormat(void) const
{
  return ((File *)this)->hasFormat();
}

BALL_INLINE 
bool File::hasFormat(const String& s) const
{
  return (original_name_.hasSuffix(s) == true && hasFormat(s) == true);
}

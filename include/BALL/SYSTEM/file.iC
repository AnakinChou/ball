// $Id: file.iC,v 1.8 2000/07/12 19:33:51 oliver Exp $


BALL_INLINE 
bool File::set(const String& name)
{
	*this = File(name);
	return isValid();
}

BALL_INLINE 
bool File::set(const File& file)
{
	*this = File(file);
	return isValid();
}

BALL_INLINE 
const String& File::getName() const
{
  return name_;
}

BALL_INLINE 
File::OpenMode File::getOpenMode() const
{
  return open_mode_;
}
  
BALL_INLINE 
File::Type File::getType(bool trace_link) const
{
  return File::getType(name_, trace_link);
}

BALL_INLINE 
::std::fstream& File::getFileStream()
{
  return *this;
}

BALL_INLINE 
bool File::copyTo(const String& destination_name, Size buffer_size)
{
  return File::copy
    (name_, destination_name, buffer_size);
}

BALL_INLINE 
bool File::remove(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::unlink(name.c_str()) == 0);
}

BALL_INLINE 
bool File::remove() const
{
  return File::remove(name_);
}

BALL_INLINE 
bool File::move(const String& source_name, const String& destination_name)
{
  if (File::copy(source_name, destination_name))
  {
    return File::remove(source_name);
  }
  return false;
}

BALL_INLINE 
bool File::moveTo(const String& destination_name)
{
  if (File::move(name_, destination_name))
  {
     name_ = destination_name;
     return true;
  }
  return false;
}

BALL_INLINE 
bool File::rename(String old_path, String new_path)
{
  FileSystem::canonizePath(old_path);
  FileSystem::canonizePath(new_path);
  
  return (bool)(::rename(old_path.c_str(), new_path.c_str()) == 0);
}

BALL_INLINE 
bool File::renameTo(const String& new_path)
{
  if (File::rename(name_, new_path))
  {
    name_ = new_path;
    return true;
  }
  return false;
}

BALL_INLINE 
bool File::truncate(String path, Size size)
{
  FileSystem::canonizePath(path);
  
  return (bool)(::truncate(path.c_str(), (long)size) == 0);
}

BALL_INLINE 
bool File::truncate(Size size) const
{
  return File::truncate(name_, size);
}

BALL_INLINE 
bool File::operator == (const File &file) const
{
  return (bool)(name_ == file.name_);
}

BALL_INLINE 
bool File::operator != (const File &file) const
{
  return (bool)(name_ != file.name_);
}

BALL_INLINE 
File& File::operator = (const File& file)
{
  set(file);
  return *this;
}

BALL_INLINE 
bool File::isValid() const
{
  return (bool)((File *)this)->::std::fstream::good();
}

BALL_INLINE 
bool File::isOpen() const
{
  return is_open_;
}

BALL_INLINE 
bool File::isClosed() const
{
  return (bool)!is_open_;
}

BALL_INLINE 
bool File::isAccessible(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), F_OK) == 0);
}

BALL_INLINE 
bool File::isAccessible() const
{
  return File::isAccessible(name_);
}

BALL_INLINE 
bool File::isCanonized() const
{
  String canonized_name(name_);

  FileSystem::canonizePath(canonized_name);
  
  return (bool)(name_ == canonized_name);
}

BALL_INLINE 
bool File::isReadable(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), R_OK) == 0);
}

BALL_INLINE 
bool File::isReadable() const
{
  return File::isReadable(name_);
}

BALL_INLINE 
bool File::isWritable(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), W_OK) == 0);
}

BALL_INLINE 
bool File::isWritable() const
{
  return File::isWritable(name_);
}

BALL_INLINE 
bool File::isExecutable(String name)
{
  FileSystem::canonizePath(name);
  
  return (bool)(::access(name.c_str(), X_OK) == 0);
}

BALL_INLINE 
bool File::isExecutable() const
{
  return File::isExecutable(name_);
}

BALL_INLINE 
Size File::getSize(String name)
{
  File tmp(name);
  return tmp.getSize();
}

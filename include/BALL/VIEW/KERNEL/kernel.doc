// $Id: kernel.doc,v 1.16 2004/05/18 15:26:28 amoll Exp $

/** \defgroup ViewKernel Kernel
		\ingroup Visualisation
		This section contains core classes that are responsible for
		handling client requests, building a connection with message 
		queuing between widgets and dialogs and other things.
 */

/** \defgroup ViewKernelClient Client/Server request handling
		\ingroup ViewKernel
		With the help of the class <em>Client</em> it is possible
		to transfer a \link BALL::Composite Composite \endlink to a <em>VIEW</em> application with
		a Server. 
		The class <em>QTTimer</em> is a timer class that is necessary for the
		\link BALL::VIEW::Server Server \endlink class. It queries every given interval whether new
		data from the client is accessable and directs it to the <em>VIEW</em>
		application.
 */

/**  \defgroup ViewKernelConnectivity Widget connectivity and message queuing
		 \ingroup ViewKernel
		 These classes are responsible that the ModularWidget instances
		 can communicate with each other. 
		 The class \link BALL::VIEW::Message Message \endlink and the various derived classes define
		 some useful messages for special events.
 */

	/**  \defgroup ViewKernelConnectivityMessages Messages
			 \ingroup ViewKernelConnectivity
				Message classes will be sent through the ConnectionObject tree for
				the purpose of communication between several ConnectionObject classes.
	*/

/**  \defgroup ViewKernelGeometricPrimitives Geometric primitives and their management
		 \ingroup ViewKernel
		 The class \link BALL::VIEW::GeometricObject GeometricObject \endlink is the most important base class
		 for all primitives (Sphere, Tube, etc.). It contains the base properties and base
		 interface definition all primitives must have.
		 The other classes manage the GeometricObject 's.
 */

/** \defgroup ViewKernelStage Setup of the Stage, Camera and LightSources
 		\ingroup ViewKernel
		These classes provide datastructures, which are required by the Scene. 
*/

/** \defgroup ViewKernelOther Other classes
 		\ingroup ViewKernel
		Here we find the CompositeManager, which handles the creation, storing and deletion of Composite instances.
		The class MolecularInformation provides means to get names for molecular objects. Also there a serveral enumerations
		and methods, e.g. for model types of Representation 's.
*/


// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:
//
// $Id: color.iC,v 1.5 2002/02/27 12:19:54 sturm Exp $

BALL_INLINE 
void ColorRGBA::setRed(const ColorUnit& red)
{
  red_ = red;
}

BALL_INLINE 
ColorUnit& ColorRGBA::red()
{
  return red_;
}

BALL_INLINE 
const ColorUnit& ColorRGBA::red() const
{
  return red_;
}

BALL_INLINE 
void ColorRGBA::setGreen(const ColorUnit& green)
{
  green_ = green;
}

BALL_INLINE 
ColorUnit& ColorRGBA::green()
{
  return green_;
}

BALL_INLINE 
const ColorUnit& ColorRGBA::green() const
{
  return green_;
}

BALL_INLINE 
void ColorRGBA::setBlue(const ColorUnit& blue)
{
  blue_ = blue;
}

BALL_INLINE 
ColorUnit& ColorRGBA::blue()
{
  return blue_;
}

BALL_INLINE 
const ColorUnit& ColorRGBA::blue() const
{
  return blue_;
}

BALL_INLINE 
void ColorRGBA::setAlpha(const ColorUnit& alpha)
{
  alpha_ = alpha;
}

BALL_INLINE 
ColorUnit& ColorRGBA::alpha()
{
  return alpha_;
}

BALL_INLINE 
const ColorUnit& ColorRGBA::alpha() const
{
  return alpha_;
}

BALL_INLINE 
void ColorRGBA::set
  (const ColorUnit& red, const ColorUnit& green,
   const ColorUnit& blue, const ColorUnit& alpha)
{
  red_   = red;
  green_ = green;
  blue_  = blue;
  alpha_ = alpha;
}

BALL_INLINE 
void ColorRGBA::get
  (ColorUnit& red, ColorUnit& green,
   ColorUnit& blue, ColorUnit& alpha) const
{
  red   = red_;
  green = green_;
  blue  = blue_;
  alpha = alpha_;
}

BALL_INLINE 
void ColorRGBA::get
  (ColorUnit& red,
   ColorUnit& green,
   ColorUnit& blue) const
{
  red   = red_;
  green = green_;
  blue  = blue_;
}

BALL_INLINE 
bool ColorRGBA::operator == (const ColorRGBA& color) const
{
  return (red_ == color.red_ && green_ == color.green_
								&& blue_ == color.blue_ && alpha_ == color.alpha_);
}

BALL_INLINE 
bool ColorRGBA::operator != (const ColorRGBA& color) const
{
  return !(this->operator==(color));
}

BALL_INLINE 
bool ColorRGBA::operator < (const ColorRGBA& color) const
{
  return (red_ < color.red_ && green_ < color.green_
								&& blue_ < color.blue_ && alpha_ < color.alpha_);
}

BALL_INLINE 
bool ColorRGBA::operator > (const ColorRGBA& color) const
{
  return (red_ > color.red_ && green_ > color.green_
								&& blue_ > color.blue_ && alpha_ > color.alpha_);
}

BALL_INLINE 
bool ColorRGBA::operator <= (const ColorRGBA& color) const
{
  return !(this->operator>(color));
}

BALL_INLINE 
bool ColorRGBA::operator >= (const ColorRGBA& color) const
{
  return !(this->operator<(color));  
}


//---ColorHSV-------


BALL_INLINE 
void ColorHSV::setHue(const ColorUnitHue& hue)
{
  hue_ = hue;
}

BALL_INLINE 
ColorUnitHue& ColorHSV::hue()
{
  return hue_;
}

BALL_INLINE 
const ColorUnitHue& ColorHSV::hue() const
{
  return hue_;
}

BALL_INLINE 
void ColorHSV::setSaturation(const ColorUnit& saturation)
{
  saturation_ = saturation;
}

BALL_INLINE 
ColorUnit& ColorHSV::saturation()
{
  return saturation_;
}

BALL_INLINE 
const ColorUnit& 
ColorHSV::saturation() const
{
  return saturation_;
}

BALL_INLINE 
void ColorHSV::setValue(const ColorUnit& value)
{
  value_ = value;
}

BALL_INLINE 
ColorUnit& ColorHSV::value()
{
  return value_;
}

BALL_INLINE 
const ColorUnit& ColorHSV::value() const
{
  return value_;
}

BALL_INLINE 
void ColorHSV::set
  (const ColorUnitHue& hue,
   const ColorUnit& saturation,
   const ColorUnit& value)
{
  hue_				= hue;
  saturation_ = saturation;
  value_      = value;
}

BALL_INLINE 
void ColorHSV::get
  (ColorUnitHue& hue,
   ColorUnit& saturation,
   ColorUnit& value) const
{
  hue					= hue_;
  saturation	= saturation_;
  value				= value_;
}

BALL_INLINE 
void ColorHSV::setRGB
  (const ColorUnit& red,
   const ColorUnit& green,
   const ColorUnit& blue)
{
  calculateHSV_(red, green, blue);
}

BALL_INLINE 
void ColorHSV::getRGB
  (ColorUnit& red,
   ColorUnit& green,
   ColorUnit& blue)
{
  calculateRGB_(red, green, blue);
}

BALL_INLINE 
bool ColorHSV::operator == (const ColorHSV& color) const
{
  return (hue_ == color.hue_
								&& saturation_ == color.saturation_
								&& value_ == color.value_);
}

BALL_INLINE 
bool ColorHSV::operator != (const ColorHSV& color) const
{
  return !(this->operator==(color));
}

BALL_INLINE 
bool ColorHSV::operator < (const ColorHSV& color) const
{
  return (hue_ < color.hue_
								&& saturation_ < color.saturation_
								&& value_ < color.value_);
}

BALL_INLINE 
bool ColorHSV::operator > (const ColorHSV &color) const
{
  return (hue_ > color.hue_
								&& saturation_ > color.saturation_
								&& value_ > color.value_);
}

BALL_INLINE 
bool ColorHSV::operator <= (const ColorHSV &color) const
{
  return !(this->operator>(color));
}

BALL_INLINE 
bool ColorHSV::operator >= (const ColorHSV &color) const
{
  return !(this->operator<(color));  
}

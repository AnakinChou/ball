// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Jul 12 19:49:27 2000

#ifndef _BALLCharmmNonBonded_H
#define	_BALLCharmmNonBonded_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "charmmNonBonded.sip"
	#include <BALL/MOLMEC/CHARMM/charmmNonBonded.h>
	using namespace BALL;
#line 15 "./sipBALLCharmmNonBonded.h"

extern SIP_EXPORT PyObject *sipClass_CharmmNonBonded;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CharmmNonBonded[];

extern SIP_EXPORT const void *sipCast_CharmmNonBonded Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_CharmmNonBonded Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCharmmNonBonded : public CharmmNonBonded
{
public:
	sipCharmmNonBonded();
	sipCharmmNonBonded(ForceField&);
	sipCharmmNonBonded(const CharmmNonBonded&,bool);
	sipCharmmNonBonded(const CharmmNonBonded&);
	~sipCharmmNonBonded();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();
	double getElectrostaticEnergy() const;
	double getVdwEnergy() const;
	double getSolvationEnergy() const;
	static double sipVH_getElectrostaticEnergy(const sipMethodCache *,sipThisType *,int);
	static double sipVH_getVdwEnergy(const sipMethodCache *,sipThisType *,int);
	static double sipVH_getSolvationEnergy(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[7];
};

extern SIP_EXPORT int sipCanConvertTo_CharmmNonBonded Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CharmmNonBonded Py_PROTO((PyObject *,CharmmNonBonded **,int,int *));
extern SIP_EXPORT CharmmNonBonded *sipForceConvertTo_CharmmNonBonded Py_PROTO((PyObject *,int *));

#endif

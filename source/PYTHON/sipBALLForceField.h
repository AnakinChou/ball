// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Jun 28 22:12:48 2000

#ifndef _BALLForceField_H
#define	_BALLForceField_H

#include "sipBALLSystem.h"
#include "sipBALLOptions.h"
#include "sipBALLString.h"
#include "sipBALLAtomVector.h"
#include "sipBALLForceFieldComponent.h"
#include "sipBALLPeriodicBoundary.h"

#line 4 "forceField.sip"
#include <BALL/MOLMEC/COMMON/forceField.h>
using namespace BALL;
#line 19 "./sipBALLForceField.h"

extern SIP_EXPORT PyObject *sipClass_ForceField;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ForceField[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_ForceField[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_ForceField[];

extern SIP_EXPORT const void *sipCast_ForceField Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ForceField Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipForceField : public ForceField
{
public:
	sipForceField();
	sipForceField(System&);
	sipForceField(System&,Options&);
	sipForceField(const ForceField&,bool);
	sipForceField(const ForceField&);
	~sipForceField();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool specificSetup();
	static bool sipVH_specificSetup(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_ForceField Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ForceField Py_PROTO((PyObject *,ForceField **,int,int *));
extern SIP_EXPORT ForceField *sipForceConvertTo_ForceField Py_PROTO((PyObject *,int *));

#endif

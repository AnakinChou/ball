// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Sun Jul 16 19:55:22 2000

#ifndef _BALLAssignRadiusProcessor_H
#define	_BALLAssignRadiusProcessor_H

#include "sipBALLAtomProcessor.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"
#include "sipBALLSize.h"

#line 36 "defaultProcessors.sip"
	#include <BALL/STRUCTURE/defaultProcessors.h>
	using namespace BALL;
#line 17 "./sipBALLAssignRadiusProcessor.h"

extern SIP_EXPORT PyObject *sipClass_AssignRadiusProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AssignRadiusProcessor[];

extern SIP_EXPORT const void *sipCast_AssignRadiusProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_AssignRadiusProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAssignRadiusProcessor : public AssignRadiusProcessor
{
public:
	sipAssignRadiusProcessor();
	sipAssignRadiusProcessor(const String&);
	sipAssignRadiusProcessor(const AssignRadiusProcessor&);
	~sipAssignRadiusProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Atom&);
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_AssignRadiusProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AssignRadiusProcessor Py_PROTO((PyObject *,AssignRadiusProcessor **,int,int *));
extern SIP_EXPORT AssignRadiusProcessor *sipForceConvertTo_AssignRadiusProcessor Py_PROTO((PyObject *,int *));

#endif

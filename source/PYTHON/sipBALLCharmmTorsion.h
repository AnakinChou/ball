// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Jul 12 19:49:27 2000

#ifndef _BALLCharmmTorsion_H
#define	_BALLCharmmTorsion_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "charmmTorsion.sip"
	#include <BALL/MOLMEC/CHARMM/charmmTorsion.h>
	using namespace BALL;
#line 15 "./sipBALLCharmmTorsion.h"

extern SIP_EXPORT PyObject *sipClass_CharmmTorsion;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CharmmTorsion[];

extern SIP_EXPORT const void *sipCast_CharmmTorsion Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_CharmmTorsion Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCharmmTorsion : public CharmmTorsion
{
public:
	sipCharmmTorsion();
	sipCharmmTorsion(ForceField&);
	sipCharmmTorsion(const CharmmTorsion&,bool);
	sipCharmmTorsion(const CharmmTorsion&);
	~sipCharmmTorsion();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_CharmmTorsion Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CharmmTorsion Py_PROTO((PyObject *,CharmmTorsion **,int,int *));
extern SIP_EXPORT CharmmTorsion *sipForceConvertTo_CharmmTorsion Py_PROTO((PyObject *,int *));

#endif

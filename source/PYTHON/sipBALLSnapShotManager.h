// C++ wrapper class header file.
//
// Generated by SIP v0.11.1 on Wed May  3 23:53:29 2000

#ifndef _BALLSnapShotManager_H
#define	_BALLSnapShotManager_H

#include "sipBALLSystem.h"
#include "sipBALLForceField.h"
#include "sipBALLOptions.h"
#include "sipBALLSnapShot.h"

#line 31 "snapShot.sip"
#include <BALL/MOLMEC/COMMON/snapShot.h>
using namespace BALL;
#line 17 "./sipBALLSnapShotManager.h"

extern SIP_EXPORT PyObject *sipClass_SnapShotManager;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_SnapShotManager[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_SnapShotManager[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_SnapShotManager[];

extern SIP_EXPORT const void *sipCast_SnapShotManager Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_SnapShotManager Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipSnapShotManager : public SnapShotManager
{
public:
	sipSnapShotManager();
	sipSnapShotManager(System&,ForceField&,char *);
	sipSnapShotManager(System&,ForceField&,char *,Options&);
	sipSnapShotManager(SnapShotManager&,bool);
	sipSnapShotManager(const SnapShotManager&);
	~sipSnapShotManager();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool setup(System&,ForceField&,char *,Options&);
	bool isValid() const;
	void takeSnapShot();
	void flushToDisk();
	void close();
	SnapShot getSnapShot(int);
	System getSnapShotAsSystem(int);
	static bool sipVH_setup(const sipMethodCache *,sipThisType *,int,System&,ForceField&,char *,Options&);
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);
	static void sipVH_takeSnapShot(const sipMethodCache *,sipThisType *,int);
	static void sipVH_flushToDisk(const sipMethodCache *,sipThisType *,int);
	static void sipVH_close(const sipMethodCache *,sipThisType *,int);
	static SnapShot sipVH_getSnapShot(const sipMethodCache *,sipThisType *,int,int);
	static System sipVH_getSnapShotAsSystem(const sipMethodCache *,sipThisType *,int,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[7];
};

extern SIP_EXPORT int sipCanConvertTo_SnapShotManager Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_SnapShotManager Py_PROTO((PyObject *,SnapShotManager **,int *));
extern SIP_EXPORT SnapShotManager *sipForceConvertTo_SnapShotManager Py_PROTO((PyObject *,int *));

#endif

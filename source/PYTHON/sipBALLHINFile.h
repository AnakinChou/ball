// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Fri Jun 23 14:19:20 2000

#ifndef _BALLHINFile_H
#define	_BALLHINFile_H

#include "sipBALLFile.h"
#include "sipBALLString.h"
#include "sipBALLSystem.h"
#include "sipBALLBox3.h"

#line 5 "HINFile.sip"
#include <BALL/FORMAT/HINFile.h>
using namespace BALL;
#line 17 "./sipBALLHINFile.h"

extern SIP_EXPORT PyObject *sipClass_HINFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_HINFile[];

extern SIP_EXPORT const void *sipCast_HINFile Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_HINFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipHINFile : public HINFile
{
public:
	sipHINFile();
	sipHINFile(String&,int);
	sipHINFile(const HINFile&);
	~sipHINFile();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool hasFormat(const String&) const;
	bool hasFormat();
	void write(System&);
	void read(System&);
	static void sipVH_write(const sipMethodCache *,sipThisType *,int,System&);
	static void sipVH_read(const sipMethodCache *,sipThisType *,int,System&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_HINFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_HINFile Py_PROTO((PyObject *,HINFile **,int,int *));
extern SIP_EXPORT HINFile *sipForceConvertTo_HINFile Py_PROTO((PyObject *,int *));

#endif

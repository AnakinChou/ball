// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Jul 17 12:40:23 2000

#ifndef _BALLCharmmStretch_H
#define	_BALLCharmmStretch_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "charmmStretch.sip"
	#include <BALL/MOLMEC/CHARMM/charmmStretch.h>
	using namespace BALL;
#line 15 "./sipBALLCharmmStretch.h"

extern SIP_EXPORT PyObject *sipClass_CharmmStretch;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CharmmStretch[];

extern SIP_EXPORT const void *sipCast_CharmmStretch Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_CharmmStretch Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCharmmStretch : public CharmmStretch
{
public:
	sipCharmmStretch();
	sipCharmmStretch(ForceField&);
	sipCharmmStretch(const CharmmStretch&,bool);
	sipCharmmStretch(const CharmmStretch&);
	~sipCharmmStretch();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_CharmmStretch Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CharmmStretch Py_PROTO((PyObject *,CharmmStretch **,int,int *));
extern SIP_EXPORT CharmmStretch *sipForceConvertTo_CharmmStretch Py_PROTO((PyObject *,int *));

#endif

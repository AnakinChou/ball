// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Fri Jun 30 00:19:15 2000

#ifndef _BALLMOL2File_H
#define	_BALLMOL2File_H

#include "sipBALLFile.h"
#include "sipBALLString.h"
#include "sipBALLSystem.h"

#line 5 "MOL2File.sip"
#include <BALL/FORMAT/MOL2File.h>
using namespace BALL;
#line 16 "./sipBALLMOL2File.h"

extern SIP_EXPORT PyObject *sipClass_MOL2File;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_MOL2File[];

extern SIP_EXPORT const void *sipCast_MOL2File Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_MOL2File Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipMOL2File : public MOL2File
{
public:
	sipMOL2File();
	sipMOL2File(const String&,int);
	sipMOL2File(const MOL2File&);
	~sipMOL2File();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool hasFormat(const String&) const;
	bool hasFormat();
	void write(const System&);
	void read(System&);
	static void sipVH_write(const sipMethodCache *,sipThisType *,int,const System&);
	static void sipVH_read(const sipMethodCache *,sipThisType *,int,System&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_MOL2File Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_MOL2File Py_PROTO((PyObject *,MOL2File **,int,int *));
extern SIP_EXPORT MOL2File *sipForceConvertTo_MOL2File Py_PROTO((PyObject *,int *));

#endif

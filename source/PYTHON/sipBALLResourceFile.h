// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Fri Jun 30 00:19:15 2000

#ifndef _BALLResourceFile_H
#define	_BALLResourceFile_H

#include "sipBALLFile.h"
#include "sipBALLString.h"
#include "sipBALLResourceEntry.h"
#include "sipBALLSize.h"

#line 70 "resourceFile.sip"
	#include <BALL/FORMAT/resourceFile.h>
	using namespace BALL;
#line 17 "./sipBALLResourceFile.h"

extern SIP_EXPORT PyObject *sipClass_ResourceFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ResourceFile[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_ResourceFile[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_ResourceFile[];

extern SIP_EXPORT const void *sipCast_ResourceFile Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ResourceFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipResourceFile : public ResourceFile
{
public:
	sipResourceFile();
	sipResourceFile(const String&);
	sipResourceFile(const ResourceFile&);
	~sipResourceFile();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool hasFormat(const String&) const;
	bool hasFormat();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_ResourceFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ResourceFile Py_PROTO((PyObject *,ResourceFile **,int,int *));
extern SIP_EXPORT ResourceFile *sipForceConvertTo_ResourceFile Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.11.1 on Wed May  3 23:53:29 2000

#ifndef _BALLObject_H
#define	_BALLObject_H


#line 4 "object.sip"
#include <BALL/CONCEPT/object.h>
using namespace BALL;
#line 13 "./sipBALLObject.h"

extern SIP_EXPORT PyObject *sipClass_Object;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Object[];

extern SIP_EXPORT const void *sipCast_Object Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_Object Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipObject : public Object
{
public:
	sipObject();
	sipObject(const Object&,bool);
	sipObject(const Object&);
	~sipObject();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void clear();
	void destroy();
	bool isValid() const;
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);
	static void sipVH_destroy(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_Object Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Object Py_PROTO((PyObject *,Object **,int *));
extern SIP_EXPORT Object *sipForceConvertTo_Object Py_PROTO((PyObject *,int *));

#endif

# Python wrapper code.
#
# Generated by SIP v0.12 on Wed Jul  5 22:12:16 2000

import libBALLc

libBALLc.sipInitModule()

class Constant:
	def __init__(self,*args):
		libBALLc.sipCallCtor(98,self,args)

class Index:
	def __init__(self,*args):
		libBALLc.sipCallCtor(97,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Position:
	def __init__(self,*args):
		libBALLc.sipCallCtor(96,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Size:
	def __init__(self,*args):
		libBALLc.sipCallCtor(95,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class VersionInfo:
	class Type:
		STABLE = 0
		ALPHA = 1
		BETA = 2
		NONPUBLIC = 3
		UNKNOWN = 4

	def __init__(self,*args):
		libBALLc.sipCallCtor(94,self,args)

class PersistentObject:
	def __init__(self,*args):
		libBALLc.sipCallCtor(92,self,args)

class Object:
	def __init__(self,*args):
		libBALLc.sipCallCtor(91,self,args)

class Selectable:
	def __init__(self,*args):
		libBALLc.sipCallCtor(90,self,args)

class UnaryCompositePredicate:
	def __init__(self,*args):
		libBALLc.sipCallCtor(89,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class UnaryAtomPredicate:
	def __init__(self,*args):
		libBALLc.sipCallCtor(88,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class Processor:
	class Result:
		ABORT = 0
		BREAK = 1
		CONTINUE = 2

	def __init__(self,*args):
		libBALLc.sipCallCtor(87,self,args)

class NamedProperty(PersistentObject):
	def __init__(self,*args):
		libBALLc.sipCallCtor(86,self,args)

class PropertyManager:
	def __init__(self,*args):
		libBALLc.sipCallCtor(85,self,args)

class Bit:
	def __init__(self,*args):
		libBALLc.sipCallCtor(84,self,args)

class BitVector:
	def __init__(self,*args):
		libBALLc.sipCallCtor(83,self,args)

class Options:
	def __init__(self,*args):
		libBALLc.sipCallCtor(82,self,args)

class String:
	def __init__(self,*args):
		libBALLc.sipCallCtor(81,self,args)
	def __cmp__(self,other):
		return cmp(str(self),str(other))
	def __repr__(self):
		return repr(self.sipThis)

class File:
	def __init__(self,*args):
		libBALLc.sipCallCtor(79,self,args)

class INIFile:
	MAX_LINE_LENGTH = 1024

	def __init__(self,*args):
		libBALLc.sipCallCtor(78,self,args)

class MOL2File(File):
	def __init__(self,*args):
		libBALLc.sipCallCtor(77,self,args)

class PDBFile:
	def __init__(self,*args):
		libBALLc.sipCallCtor(76,self,args)

class XYZFile(File):
	def __init__(self,*args):
		libBALLc.sipCallCtor(75,self,args)

class ResourceEntry:
	def __init__(self,*args):
		libBALLc.sipCallCtor(74,self,args)

class ResourceFile(File):
	def __init__(self,*args):
		libBALLc.sipCallCtor(73,self,args)

class Element(PropertyManager):
	def __init__(self,*args):
		libBALLc.sipCallCtor(70,self,args)

class PTE_(PropertyManager):
	def __init__(self,*args):
		libBALLc.sipCallCtor(69,self,args)

class AtomType:
	def __init__(self,*args):
		libBALLc.sipCallCtor(68,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class CompositeProcessor:
	def __init__(self,*args):
		libBALLc.sipCallCtor(56,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class Angle:
	def __init__(self,*args):
		libBALLc.sipCallCtor(54,self,args)

class Box3:
	def __init__(self,*args):
		libBALLc.sipCallCtor(53,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(53,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(53,self,name,value)
	def __repr__(self):
		return repr(self.sipThis)

class Circle3:
	def __init__(self,*args):
		libBALLc.sipCallCtor(52,self,args)

class Line3:
	class Form:
		FORM__PARAMETER = 0
		FORM__TWO_POINTS = 1

	def __init__(self,*args):
		libBALLc.sipCallCtor(51,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(51,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(51,self,name,value)

class Matrix4x4:
	def __init__(self,*args):
		libBALLc.sipCallCtor(50,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(50,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(50,self,name,value)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __div__(self,other):
		return self.Operator__div__(other)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __sub__(self,other):
		return self.Operator__sub__(other)
	def __add__(self,other):
		return self.Operator__add__(other)
	def __neg__(self):
		return self.Operator__neg__()
	def __pos__(self):
		return self.Operator__pos__()
	def __getitem__(self,other):
		return self.Operator__getitem__(other)
	def __getitem__(self,other):
		return self.Operator__getitem__(other)
	def __call__(self,other):
		return self.Operator__call__(other)
	def __call__(self,other):
		return self.Operator__call__(other)

class Plane3:
	def __init__(self,*args):
		libBALLc.sipCallCtor(49,self,args)

class Quaternion:
	def __init__(self,*args):
		libBALLc.sipCallCtor(48,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(48,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(48,self,name,value)

class Sphere3:
	def __init__(self,*args):
		libBALLc.sipCallCtor(47,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(47,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(47,self,name,value)

class Surface:
	def __init__(self,*args):
		libBALLc.sipCallCtor(46,self,args)

class Vector3(PersistentObject):
	def __init__(self,*args):
		libBALLc.sipCallCtor(45,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(45,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(45,self,name,value)
	def __repr__(self):
		return repr(self.sipThis)
	def __mod__(self,other):
		return self.Operator__mod__(other)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __div__(self,other):
		return self.Operator__div__(other)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __neg__(self):
		return self.Operator__neg__()
	def __pos__(self):
		return self.Operator__pos__()
	def __getitem__(self,other):
		return self.Operator__getitem__(other)
	def __getitem__(self,other):
		return self.Operator__getitem__(other)

class Vector4:
	def __init__(self,*args):
		libBALLc.sipCallCtor(44,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(44,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(44,self,name,value)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __div__(self,other):
		return self.Operator__div__(other)
	def __mul__(self,other):
		return self.Operator__mul__(other)
	def __neg__(self):
		return self.Operator__neg__()
	def __pos__(self):
		return self.Operator__pos__()
	def __getitem__(self,other):
		return self.Operator__getitem__(other)
	def __getitem__(self,other):
		return self.Operator__getitem__(other)

class ForceField:
	def __init__(self,*args):
		libBALLc.sipCallCtor(42,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(42,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(42,self,name,value)

class ForceFieldComponent:
	def __init__(self,*args):
		libBALLc.sipCallCtor(40,self,args)

class AmberNonBonded(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(39,self,args)

class AmberStretch(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(38,self,args)

class AmberTorsion(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(37,self,args)

class CharmmFF(ForceField):
	def __init__(self,*args):
		libBALLc.sipCallCtor(36,self,args)

class CharmmBend(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(35,self,args)

class CharmmImproperTorsion(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(34,self,args)

class CharmmNonBonded(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(33,self,args)

class CharmmStretch(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(32,self,args)

class CharmmTorsion(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(31,self,args)

class AtomVector:
	def __init__(self,*args):
		libBALLc.sipCallCtor(30,self,args)

class Gradient:
	def __init__(self,*args):
		libBALLc.sipCallCtor(29,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(29,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(29,self,name,value)

class PeriodicBoundary:
	def __init__(self,*args):
		libBALLc.sipCallCtor(28,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(28,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(28,self,name,value)

class SnapShotManager:
	def __init__(self,*args):
		libBALLc.sipCallCtor(27,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(27,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(27,self,name,value)

class MolecularDynamics:
	def __init__(self,*args):
		libBALLc.sipCallCtor(25,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(25,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(25,self,name,value)

class MicroCanonicalMD(MolecularDynamics):
	def __init__(self,*args):
		libBALLc.sipCallCtor(24,self,args)

class EnergyMinimizer:
	def __init__(self,*args):
		libBALLc.sipCallCtor(22,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(22,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(22,self,name,value)

class AtomProcessor:
	def __init__(self,*args):
		libBALLc.sipCallCtor(20,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class ClearChargeProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(8,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class ClearRadiusProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(7,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class AssignRadiusProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(6,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class AssignChargeProcessor(AssignRadiusProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(5,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class BoundingBoxProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(4,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class GeometricCenterProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(3,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class FragmentDistanceCollector(CompositeProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(2,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class TranslationProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(1,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class TransformationProcessor(AtomProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(0,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class Composite(PersistentObject,Object,Selectable):
	def __init__(self,*args):
		libBALLc.sipCallCtor(93,self,args)

class HINFile(File):
	def __init__(self,*args):
		libBALLc.sipCallCtor(80,self,args)

class Atom(Composite,PropertyManager):
	UNKNOWN_TYPE = -1
	ANY_TYPE = 0
	MAX_NUMBER_OF_BONDS = 8

	class Property:
		NUMBER_OF_PROPERTIES = 0

	class FullNameType:
		NO_VARIANT_EXTENSIONS = 0
		ADD_VARIANT_EXTENSIONS = 1

	def __init__(self,*args):
		libBALLc.sipCallCtor(71,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Bond(Composite,PropertyManager):
	class BondOrder:
		ORDER__UNKNOWN = 0
		ORDER__SINGLE = 1
		ORDER__DOUBLE = 2
		ORDER__TRIPLE = 3
		ORDER__QUADRUPLE = 4
		ORDER__AROMATIC = 5
		NUMBER_OF_BOND_ORDERS = 6

	class BondType:
		TYPE__UNKNOWN = 0
		TYPE__COVALENT = 1
		TYPE__HYDROGEN = 2
		TYPE__DISULPHIDE_BRIDGE = 3
		TYPE__SALT_BRIDGE = 4
		TYPE__PEPTIDE = 5
		NUMBER_OF_BOND_TYPES = 6

	class Property:
		NUMBER_OF_PROPERTIES = 0

	def __init__(self,*args):
		libBALLc.sipCallCtor(67,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class BaseFragment(Composite,PropertyManager):
	def __init__(self,*args):
		libBALLc.sipCallCtor(66,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Chain(BaseFragment):
	def __init__(self,*args):
		libBALLc.sipCallCtor(65,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Fragment(BaseFragment):
	def __init__(self,*args):
		libBALLc.sipCallCtor(64,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Molecule(BaseFragment):
	def __init__(self,*args):
		libBALLc.sipCallCtor(63,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class NucleicAcid(Molecule):
	def __init__(self,*args):
		libBALLc.sipCallCtor(62,self,args)

class Nucleotide(Fragment):
	def __init__(self,*args):
		libBALLc.sipCallCtor(61,self,args)

class Protein(Molecule):
	def __init__(self,*args):
		libBALLc.sipCallCtor(60,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Residue(Fragment):
	def __init__(self,*args):
		libBALLc.sipCallCtor(59,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class SecondaryStructure(BaseFragment):
	def __init__(self,*args):
		libBALLc.sipCallCtor(58,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class Selector(CompositeProcessor):
	def __init__(self,*args):
		libBALLc.sipCallCtor(57,self,args)
	def __call__(self,other):
		return self.Operator__call__(other)

class System(BaseFragment,PropertyManager):
	def __init__(self,*args):
		libBALLc.sipCallCtor(55,self,args)
	def __repr__(self):
		return repr(self.sipThis)

class AmberFF(ForceField):
	def __init__(self,*args):
		libBALLc.sipCallCtor(43,self,args)

class AmberBend(ForceFieldComponent):
	def __init__(self,*args):
		libBALLc.sipCallCtor(41,self,args)

class CanonicalMD(MolecularDynamics):
	def __init__(self,*args):
		libBALLc.sipCallCtor(26,self,args)

class ConjugateGradientMinimizer(EnergyMinimizer):
	class UpdateMethod:
		POLAK_RIBIERE = 0
		FLETCHER_REEVES = 1
		SHANNO = 2

	def __init__(self,*args):
		libBALLc.sipCallCtor(23,self,args)
	def __getattr__(self,name):
		return libBALLc.sipCallGetVar(23,self,name)
	def __setattr__(self,name,value):
		return libBALLc.sipCallSetVar(23,self,name,value)

class PDBAtom(Atom):
	def __init__(self,*args):
		libBALLc.sipCallCtor(72,self,args)
	def __repr__(self):
		return repr(self.sipThis)

# Register the classes with the C++ module.

libBALLc.sipRegisterClasses()

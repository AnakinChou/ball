// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jun 27 22:43:53 2000

#ifndef _BALLProtein_H
#define	_BALLProtein_H

#include "sipBALLMolecule.h"
#include "sipBALLString.h"
#include "sipBALLChain.h"
#include "sipBALLSecondaryStructure.h"
#include "sipBALLResidue.h"
#include "sipBALLPDBAtom.h"

#line 5 "protein.sip"
#include <BALL/KERNEL/protein.h>
using namespace BALL;
#line 19 "./sipBALLProtein.h"

extern SIP_EXPORT PyObject *sipClass_Protein;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Protein[];

extern SIP_EXPORT const void *sipCast_Protein Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_Protein Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipProtein : public Protein
{
public:
	sipProtein();
	sipProtein(const Protein&,bool);
	sipProtein(const String&,const String&);
	sipProtein(const Protein&);
	~sipProtein();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void select();
	void deselect();
	void clear();
	void destroy();
	bool isValid() const;

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_Protein Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Protein Py_PROTO((PyObject *,Protein **,int,int *));
extern SIP_EXPORT Protein *sipForceConvertTo_Protein Py_PROTO((PyObject *,int *));

#endif

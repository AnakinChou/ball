// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 18 11:27:58 2000

#ifndef _BALLConjugateGradientMinimizer_H
#define	_BALLConjugateGradientMinimizer_H

#include "sipBALLEnergyMinimizer.h"
#include "sipBALLForceField.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLOptions.h"
#include "sipBALLSize.h"

#line 7 "conjugateGradient.sip"
	#include <BALL/MOLMEC/MINIMIZATION/conjugateGradient.h>
	using namespace BALL;
#line 18 "./sipBALLConjugateGradientMinimizer.h"

extern SIP_EXPORT PyObject *sipClass_ConjugateGradientMinimizer;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ConjugateGradientMinimizer[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_ConjugateGradientMinimizer[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_ConjugateGradientMinimizer[];

extern SIP_EXPORT const void *sipCast_ConjugateGradientMinimizer Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ConjugateGradientMinimizer Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipConjugateGradientMinimizer : public ConjugateGradientMinimizer
{
public:
	sipConjugateGradientMinimizer();
	sipConjugateGradientMinimizer(ForceField&);
	sipConjugateGradientMinimizer(ForceField&,SnapShotManager *);
	sipConjugateGradientMinimizer(ForceField&,SnapShotManager *,const Options&);
	sipConjugateGradientMinimizer(ForceField&,const Options&);
	sipConjugateGradientMinimizer(const ConjugateGradientMinimizer&,bool);
	sipConjugateGradientMinimizer(const ConjugateGradientMinimizer&);
	~sipConjugateGradientMinimizer();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool isConverged() const;
	double updateEnergy();
	void updateForces();
	void printEnergy() const;
	void takeSnapShot() const;
	void finishIteration();
	bool specificSetup();
	bool findStep();
	void updateDirection();
	bool minimize(int,bool);
	bool minimize(Size,bool);
	static bool sipVH_minimize(const sipMethodCache *,sipThisType *,int,Size,bool);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[10];
};

extern SIP_EXPORT int sipCanConvertTo_ConjugateGradientMinimizer Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ConjugateGradientMinimizer Py_PROTO((PyObject *,ConjugateGradientMinimizer **,int,int *));
extern SIP_EXPORT ConjugateGradientMinimizer *sipForceConvertTo_ConjugateGradientMinimizer Py_PROTO((PyObject *,int *));

#endif

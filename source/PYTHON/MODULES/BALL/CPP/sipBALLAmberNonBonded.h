// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 21:25:05 2001

#ifndef _BALLAmberNonBonded_h
#define	_BALLAmberNonBonded_h


#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "amberNonBonded.sip"
	#include <BALL/MOLMEC/AMBER/amberNonBonded.h>
	using namespace BALL;
#line 16 "sipBALLAmberNonBonded.h"

extern SIP_EXPORT PyObject *sipClass_AmberNonBonded;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AmberNonBonded[];

extern "C" SIP_EXPORT const void *sipCast_AmberNonBonded Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_AmberNonBonded Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAmberNonBonded : public AmberNonBonded
{
public:
	sipAmberNonBonded();
	sipAmberNonBonded(ForceField&);
	sipAmberNonBonded(const AmberNonBonded&,bool);
	sipAmberNonBonded(const AmberNonBonded&);
	~sipAmberNonBonded() throw();
	double getEnergy() const;
	bool setup() throw();
	double getVdwEnergy() const throw();
	static double sipVH_getVdwEnergy(const sipMethodCache *,sipThisType *,int);
	double getElectrostaticEnergy() const throw();
	static double sipVH_getElectrostaticEnergy(const sipMethodCache *,sipThisType *,int);
	void updateForces() throw();
	double updateEnergy() throw();

	sipThisType *sipPyThis;

private:
	sipAmberNonBonded(const sipAmberNonBonded &);
	sipAmberNonBonded &operator = (const sipAmberNonBonded &);

	sipMethodCache sipPyMethods[6];
};

extern SIP_EXPORT int sipCanConvertTo_AmberNonBonded Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AmberNonBonded Py_PROTO((PyObject *,AmberNonBonded **,int,int *));
extern SIP_EXPORT AmberNonBonded *sipForceConvertTo_AmberNonBonded Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 25 00:09:33 2000

#ifndef _BALLExpression_H
#define	_BALLExpression_H

#include "sipBALLString.h"
#include "sipBALLAtom.h"
#include "sipBALLExpressionPredicate.h"

#line 74 "expression.sip"
	#include <BALL/KERNEL/expression.h>
	using namespace BALL;
#line 16 "../CPP/sipBALLExpression.h"

extern SIP_EXPORT PyObject *sipClass_Expression;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Expression[];

extern SIP_EXPORT const void *sipCast_Expression Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_Expression Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipExpression : public Expression
{
public:
	sipExpression();
	sipExpression(const Expression&);
	sipExpression(const String&);
	~sipExpression();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool operator()(const Atom&) const;
	static bool sipVH_Operator__call__(const sipMethodCache *,sipThisType *,int,const Atom&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_Expression Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Expression Py_PROTO((PyObject *,Expression **,int,int *));
extern SIP_EXPORT Expression *sipForceConvertTo_Expression Py_PROTO((PyObject *,int *));

#endif

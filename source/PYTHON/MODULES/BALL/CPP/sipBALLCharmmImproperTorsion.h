// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 25 16:53:42 2000

#ifndef _BALLCharmmImproperTorsion_H
#define	_BALLCharmmImproperTorsion_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "charmmImproperTorsion.sip"
	#include <BALL/MOLMEC/CHARMM/charmmImproperTorsion.h>
	using namespace BALL;
#line 15 "../CPP/sipBALLCharmmImproperTorsion.h"

extern SIP_EXPORT PyObject *sipClass_CharmmImproperTorsion;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CharmmImproperTorsion[];

extern SIP_EXPORT const void *sipCast_CharmmImproperTorsion Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_CharmmImproperTorsion Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCharmmImproperTorsion : public CharmmImproperTorsion
{
public:
	sipCharmmImproperTorsion();
	sipCharmmImproperTorsion(ForceField&);
	sipCharmmImproperTorsion(const CharmmImproperTorsion&,bool);
	sipCharmmImproperTorsion(const CharmmImproperTorsion&);
	~sipCharmmImproperTorsion();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_CharmmImproperTorsion Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CharmmImproperTorsion Py_PROTO((PyObject *,CharmmImproperTorsion **,int,int *));
extern SIP_EXPORT CharmmImproperTorsion *sipForceConvertTo_CharmmImproperTorsion Py_PROTO((PyObject *,int *));

#endif

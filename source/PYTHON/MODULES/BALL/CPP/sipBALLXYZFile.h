// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Jul 24 21:19:20 2000

#ifndef _BALLXYZFile_H
#define	_BALLXYZFile_H

#include "sipBALLFile.h"
#include "sipBALLString.h"
#include "sipBALLOpenMode.h"
#include "sipBALLSystem.h"

#line 7 "XYZFile.sip"
	#include <BALL/FORMAT/XYZFile.h>
	using namespace BALL;
#line 17 "../CPP/sipBALLXYZFile.h"

extern SIP_EXPORT PyObject *sipClass_XYZFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_XYZFile[];

extern SIP_EXPORT const void *sipCast_XYZFile Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_XYZFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipXYZFile : public XYZFile
{
public:
	sipXYZFile();
	sipXYZFile(const String&,OpenMode);
	sipXYZFile(const XYZFile&);
	~sipXYZFile();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void write(const System&);
	void read(System&);
	static void sipVH_write(const sipMethodCache *,sipThisType *,int,const System&);
	static void sipVH_read(const sipMethodCache *,sipThisType *,int,System&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[2];
};

extern SIP_EXPORT int sipCanConvertTo_XYZFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_XYZFile Py_PROTO((PyObject *,XYZFile **,int,int *));
extern SIP_EXPORT XYZFile *sipForceConvertTo_XYZFile Py_PROTO((PyObject *,int *));

#endif

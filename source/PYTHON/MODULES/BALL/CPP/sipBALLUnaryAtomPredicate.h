// C++ wrapper class header file.
//
// Generated by SIP v2.4 on Wed Jul 25 07:17:27 2001

#ifndef _BALLUnaryAtomPredicate_H
#define	_BALLUnaryAtomPredicate_H

#include "sipBALLAtom.h"

#line 22 "predicateConcept.sip"
	#include <BALL/CONCEPT/predicate.h>
	using namespace BALL;
	typedef UnaryPredicate<Atom> UnaryAtomPredicate;
#line 15 "sipBALLUnaryAtomPredicate.h"

extern SIP_EXPORT PyObject *sipClass_UnaryAtomPredicate;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_UnaryAtomPredicate[];

extern SIP_EXPORT const void *sipCast_UnaryAtomPredicate Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_UnaryAtomPredicate Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipUnaryAtomPredicate : public UnaryAtomPredicate
{
public:
	sipUnaryAtomPredicate() throw();
	sipUnaryAtomPredicate(const UnaryAtomPredicate&);
	~sipUnaryAtomPredicate() throw();
	bool operator ()(const Atom&) const throw();
	static bool sipVH_CallOperator(const sipMethodCache *,sipThisType *,int,const Atom&);

	sipThisType *sipPyThis;

private:
	sipUnaryAtomPredicate(const sipUnaryAtomPredicate &);
	sipUnaryAtomPredicate &operator = (const sipUnaryAtomPredicate &);

	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_UnaryAtomPredicate Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_UnaryAtomPredicate Py_PROTO((PyObject *,UnaryAtomPredicate **,int,int *));
extern SIP_EXPORT UnaryAtomPredicate *sipForceConvertTo_UnaryAtomPredicate Py_PROTO((PyObject *,int *));

#endif

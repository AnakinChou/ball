// C++ interface header file.
//
// Generated by SIP v2.5 on Wed Aug 22 06:12:41 2001

#ifndef _BALLAssignRadiusProcessor_h
#define	_BALLAssignRadiusProcessor_h


#include "sipBALLAtomProcessor.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 36 "defaultProcessors.sip"
	#include <BALL/STRUCTURE/defaultProcessors.h>
	using namespace BALL;
#line 17 "sipBALLAssignRadiusProcessor.h"

extern SIP_EXPORT PyObject *sipClass_AssignRadiusProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AssignRadiusProcessor[];

extern "C" SIP_EXPORT const void *sipCast_AssignRadiusProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_AssignRadiusProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAssignRadiusProcessor : public AssignRadiusProcessor
{
public:
	sipAssignRadiusProcessor();
	sipAssignRadiusProcessor(const String&);
	sipAssignRadiusProcessor(const AssignRadiusProcessor&);
	~sipAssignRadiusProcessor();
	Processor::Result operator()(Atom&);
	bool finish();
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);
	bool start();
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipAssignRadiusProcessor(const sipAssignRadiusProcessor &);
	sipAssignRadiusProcessor &operator = (const sipAssignRadiusProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_AssignRadiusProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AssignRadiusProcessor Py_PROTO((PyObject *,AssignRadiusProcessor **,int,int *));
extern SIP_EXPORT AssignRadiusProcessor *sipForceConvertTo_AssignRadiusProcessor Py_PROTO((PyObject *,int *));

#endif

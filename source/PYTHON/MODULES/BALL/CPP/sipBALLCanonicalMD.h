// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Tue Jul 31 20:01:05 2001

#ifndef _BALLCanonicalMD_h
#define	_BALLCanonicalMD_h


#include "sipBALLMolecularDynamics.h"
#include "sipBALLForceField.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLOptions.h"

#line 7 "canonicalMD.sip"
	#include <BALL/MOLMEC/MDSIMULATION/canonicalMD.h>
	using namespace BALL;
#line 18 "sipBALLCanonicalMD.h"

extern SIP_EXPORT PyObject *sipClass_CanonicalMD;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CanonicalMD[];

extern "C" SIP_EXPORT const void *sipCast_CanonicalMD Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_CanonicalMD Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCanonicalMD : public CanonicalMD
{
public:
	sipCanonicalMD();
	sipCanonicalMD(ForceField&);
	sipCanonicalMD(ForceField&,SnapShotManager *);
	sipCanonicalMD(ForceField&,SnapShotManager *,const Options&);
	sipCanonicalMD(const CanonicalMD&,bool);
	sipCanonicalMD(const CanonicalMD&);
	~sipCanonicalMD() throw();
	void simulateTime(double,bool) throw();
	void simulateIterations(int,bool) throw();
	void simulate(bool) throw();
	void setTimeStep(double) throw();
	bool specificSetup() throw();
	bool setup(ForceField&,SnapShotManager *,const Options&) throw();
	bool setup(ForceField&,SnapShotManager *) throw();

	sipThisType *sipPyThis;

private:
	sipCanonicalMD(const sipCanonicalMD &);
	sipCanonicalMD &operator = (const sipCanonicalMD &);

	sipMethodCache sipPyMethods[7];
};

extern SIP_EXPORT int sipCanConvertTo_CanonicalMD Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CanonicalMD Py_PROTO((PyObject *,CanonicalMD **,int,int *));
extern SIP_EXPORT CanonicalMD *sipForceConvertTo_CanonicalMD Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Oct 24 16:55:30 2000

#ifndef _BALLCharmmBend_H
#define	_BALLCharmmBend_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "charmmBend.sip"
	#include <BALL/MOLMEC/CHARMM/charmmBend.h>
	using namespace BALL;
#line 15 "../CPP/sipBALLCharmmBend.h"

extern SIP_EXPORT PyObject *sipClass_CharmmBend;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CharmmBend[];

extern SIP_EXPORT const void *sipCast_CharmmBend Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_CharmmBend Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCharmmBend : public CharmmBend
{
public:
	sipCharmmBend();
	sipCharmmBend(ForceField&);
	sipCharmmBend(const CharmmBend&,bool);
	sipCharmmBend(const CharmmBend&);
	~sipCharmmBend();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_CharmmBend Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CharmmBend Py_PROTO((PyObject *,CharmmBend **,int,int *));
extern SIP_EXPORT CharmmBend *sipForceConvertTo_CharmmBend Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 25 16:53:41 2000

#ifndef _BALLMainControl_H
#define	_BALLMainControl_H

#include "sipBALLEmbeddable.h"
#include "sipBALLCompositeDescriptor.h"
#include "sipBALLComposite.h"
#include "sipBALLVector3.h"
#include "sipBALLBox3.h"
#include "sipBALLString.h"
#include "sipBALLPyCompositeDescriptorList.h"
#include "sipBALLOptions.h"
#include "sipBALLPosition.h"

#line 9 "mainControl.sip"
	#include <BALL/VIEW/OPENGL/KERNEL/mainControl.h>
	using namespace BALL;
	using namespace BALL::VIEW;
#line 23 "../CPP/sipBALLMainControl.h"

extern SIP_EXPORT PyObject *sipClass_MainControl;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_MainControl[];

extern SIP_EXPORT const void *sipCast_MainControl Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_MainControl Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipMainControl : public MainControl
{
public:
	sipMainControl(const MainControl&,bool);
	sipMainControl(const MainControl&);
	~sipMainControl();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void registerThis();
	void clear();
	void destroy();
	Options * getOptions();
	bool isValid() const;
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);
	static void sipVH_destroy(const sipMethodCache *,sipThisType *,int);
	static Options * sipVH_getOptions(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_MainControl Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_MainControl Py_PROTO((PyObject *,MainControl **,int,int *));
extern SIP_EXPORT MainControl *sipForceConvertTo_MainControl Py_PROTO((PyObject *,int *));

#endif

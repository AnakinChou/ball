// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 21:25:07 2001

#ifndef _BALLComposite_h
#define	_BALLComposite_h


#include "sipBALLPersistentObject.h"
#include "sipBALLObject.h"
#include "sipBALLSelectable.h"
#include "sipBALLIndex.h"
#include "sipBALLPreciseTime.h"

#line 9 "composite.sip"
	#include <BALL/CONCEPT/composite.h>
	using namespace BALL;
#line 19 "sipBALLComposite.h"

extern SIP_EXPORT PyObject *sipClass_Composite;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Composite[];

extern "C" SIP_EXPORT const void *sipCast_Composite Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_Composite Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipComposite : public Composite
{
public:
	sipComposite();
	sipComposite(const Composite&,bool);
	sipComposite(const Composite&);
	~sipComposite() throw();
	bool isValid() const throw();
	void deselect() throw();
	void select() throw();
	void destroy() throw();
	static void sipVH_destroy(const sipMethodCache *,sipThisType *,int);
	void clear() throw();

	sipThisType *sipPyThis;

private:
	sipComposite(const sipComposite &);
	sipComposite &operator = (const sipComposite &);

	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_Composite Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Composite Py_PROTO((PyObject *,Composite **,int,int *));
extern SIP_EXPORT Composite *sipForceConvertTo_Composite Py_PROTO((PyObject *,int *));

#endif

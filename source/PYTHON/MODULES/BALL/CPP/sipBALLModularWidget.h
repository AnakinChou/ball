// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Oct 24 16:55:28 2000

#ifndef _BALLModularWidget_H
#define	_BALLModularWidget_H

#include "sipBALLEmbeddable.h"
#include "sipBALLString.h"
#include "sipBALLMainControl.h"

#line 7 "modularWidget.sip"
	#include <BALL/VIEW/GUI/WIDGETS/modularWidget.h>
	using namespace BALL;
	using namespace BALL::VIEW;
#line 17 "../CPP/sipBALLModularWidget.h"

extern SIP_EXPORT PyObject *sipClass_ModularWidget;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ModularWidget[];

extern SIP_EXPORT const void *sipCast_ModularWidget Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ModularWidget Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipModularWidget : public ModularWidget
{
public:
	sipModularWidget();
	sipModularWidget(const ModularWidget&);
	~sipModularWidget();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void registerThis();
	void initializeWidget(MainControl&);
	void finalizeWidget(MainControl&);
	void checkMenu(MainControl&);
	static void sipVH_initializeWidget(const sipMethodCache *,sipThisType *,int,MainControl&);
	static void sipVH_finalizeWidget(const sipMethodCache *,sipThisType *,int,MainControl&);
	static void sipVH_checkMenu(const sipMethodCache *,sipThisType *,int,MainControl&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_ModularWidget Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ModularWidget Py_PROTO((PyObject *,ModularWidget **,int,int *));
extern SIP_EXPORT ModularWidget *sipForceConvertTo_ModularWidget Py_PROTO((PyObject *,int *));

#endif

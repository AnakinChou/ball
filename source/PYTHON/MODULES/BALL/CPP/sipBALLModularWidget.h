// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 07:14:16 2001

#ifndef _BALLModularWidget_h
#define	_BALLModularWidget_h


#include "sipBALLEmbeddable.h"
#include "sipBALLString.h"
#include "sipBALLMainControl.h"

#line 7 "modularWidget.sip"
	#include <BALL/VIEW/GUI/WIDGETS/modularWidget.h>
	using namespace BALL;
	using namespace BALL::VIEW;
#line 18 "sipBALLModularWidget.h"

extern SIP_EXPORT PyObject *sipClass_ModularWidget;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ModularWidget[];

extern "C" SIP_EXPORT const void *sipCast_ModularWidget Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_ModularWidget Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipModularWidget : public ModularWidget
{
public:
	sipModularWidget();
	sipModularWidget(const ModularWidget&);
	~sipModularWidget() throw();
	void registerThis() throw();
	void checkMenu(MainControl&) throw();
	static void sipVH_checkMenu(const sipMethodCache *,sipThisType *,int,MainControl&);
	void finalizeWidget(MainControl&);
	static void sipVH_finalizeWidget(const sipMethodCache *,sipThisType *,int,MainControl&);
	void initializeWidget(MainControl&);
	static void sipVH_initializeWidget(const sipMethodCache *,sipThisType *,int,MainControl&);

	sipThisType *sipPyThis;

private:
	sipModularWidget(const sipModularWidget &);
	sipModularWidget &operator = (const sipModularWidget &);

	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_ModularWidget Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ModularWidget Py_PROTO((PyObject *,ModularWidget **,int,int *));
extern SIP_EXPORT ModularWidget *sipForceConvertTo_ModularWidget Py_PROTO((PyObject *,int *));

#endif

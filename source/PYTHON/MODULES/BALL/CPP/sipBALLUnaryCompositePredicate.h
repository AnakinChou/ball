// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Nov 15 12:43:56 2000

#ifndef _BALLUnaryCompositePredicate_H
#define	_BALLUnaryCompositePredicate_H

#include "sipBALLComposite.h"

#line 7 "predicateConcept.sip"
	#include <BALL/CONCEPT/predicate.h>
	using namespace BALL;
	typedef UnaryPredicate<Composite> UnaryCompositePredicate;
#line 15 "../CPP/sipBALLUnaryCompositePredicate.h"

extern SIP_EXPORT PyObject *sipClass_UnaryCompositePredicate;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_UnaryCompositePredicate[];

extern SIP_EXPORT const void *sipCast_UnaryCompositePredicate Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_UnaryCompositePredicate Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipUnaryCompositePredicate : public UnaryCompositePredicate
{
public:
	sipUnaryCompositePredicate();
	sipUnaryCompositePredicate(const UnaryCompositePredicate&);
	~sipUnaryCompositePredicate();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool operator()(const Composite&) const;
	static bool sipVH_Operator__call__(const sipMethodCache *,sipThisType *,int,const Composite&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_UnaryCompositePredicate Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_UnaryCompositePredicate Py_PROTO((PyObject *,UnaryCompositePredicate **,int,int *));
extern SIP_EXPORT UnaryCompositePredicate *sipForceConvertTo_UnaryCompositePredicate Py_PROTO((PyObject *,int *));

#endif

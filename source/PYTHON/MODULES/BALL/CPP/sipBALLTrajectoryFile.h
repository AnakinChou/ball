// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jan 23 19:05:43 2001

#ifndef _BALLTrajectoryFile_H
#define	_BALLTrajectoryFile_H

#include "sipBALLFile.h"
#include "sipBALLString.h"
#include "sipBALLOpenMode.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLSnapShot.h"

#line 7 "trajectoryFile.sip"
	#include <BALL/MOLMEC/COMMON/snapShot.h>
	#include <BALL/FORMAT/trajectoryFile.h>
	using namespace BALL;
#line 19 "../CPP/sipBALLTrajectoryFile.h"

extern SIP_EXPORT PyObject *sipClass_TrajectoryFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_TrajectoryFile[];

extern SIP_EXPORT const void *sipCast_TrajectoryFile Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_TrajectoryFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipTrajectoryFile : public TrajectoryFile
{
public:
	sipTrajectoryFile();
	sipTrajectoryFile(const TrajectoryFile&);
	sipTrajectoryFile(const String&,OpenMode);
	~sipTrajectoryFile();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void clear();
	bool readHeader();
	bool updateHeader(const SnapShotManager&);
	bool writeHeader();
	bool read(SnapShotManager&);
	bool write(const SnapShotManager&);
	bool append(const SnapShot&);
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_readHeader(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_updateHeader(const sipMethodCache *,sipThisType *,int,const SnapShotManager&);
	static bool sipVH_writeHeader(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_read(const sipMethodCache *,sipThisType *,int,SnapShotManager&);
	static bool sipVH_write(const sipMethodCache *,sipThisType *,int,const SnapShotManager&);
	static bool sipVH_append(const sipMethodCache *,sipThisType *,int,const SnapShot&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[7];
};

extern SIP_EXPORT int sipCanConvertTo_TrajectoryFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_TrajectoryFile Py_PROTO((PyObject *,TrajectoryFile **,int,int *));
extern SIP_EXPORT TrajectoryFile *sipForceConvertTo_TrajectoryFile Py_PROTO((PyObject *,int *));

#endif

// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 21:25:05 2001

#ifndef _BALLTrajectoryFile_h
#define	_BALLTrajectoryFile_h


#include "sipBALLFile.h"
#include "sipBALLString.h"
#include "sipBALLstd__openmode.h"
#include "sipBALLSnapShot.h"

#line 6 "trajectoryFile.sip"
	#include <BALL/FORMAT/trajectoryFile.h>
	using namespace BALL;
#line 18 "sipBALLTrajectoryFile.h"

extern SIP_EXPORT PyObject *sipClass_TrajectoryFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_TrajectoryFile[];

extern "C" SIP_EXPORT const void *sipCast_TrajectoryFile Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_TrajectoryFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipTrajectoryFile : public TrajectoryFile
{
public:
	sipTrajectoryFile() throw();
	sipTrajectoryFile(const TrajectoryFile&) throw();
	sipTrajectoryFile(const String&,std__openmode) throw();
	~sipTrajectoryFile() throw();
	bool read(SnapShot&) throw();
	static bool sipVH_read(const sipMethodCache *,sipThisType *,int,SnapShot&);
	bool append(const SnapShot&) throw();
	static bool sipVH_append(const sipMethodCache *,sipThisType *,int,const SnapShot&);
	bool writeHeader() throw();
	static bool sipVH_writeHeader(const sipMethodCache *,sipThisType *,int);
	bool readHeader() throw();
	static bool sipVH_readHeader(const sipMethodCache *,sipThisType *,int);
	void clear() throw();
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipTrajectoryFile(const sipTrajectoryFile &);
	sipTrajectoryFile &operator = (const sipTrajectoryFile &);

	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_TrajectoryFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_TrajectoryFile Py_PROTO((PyObject *,TrajectoryFile **,int,int *));
extern SIP_EXPORT TrajectoryFile *sipForceConvertTo_TrajectoryFile Py_PROTO((PyObject *,int *));

#endif

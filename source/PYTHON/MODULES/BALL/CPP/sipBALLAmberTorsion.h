// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Jul 24 21:19:19 2000

#ifndef _BALLAmberTorsion_H
#define	_BALLAmberTorsion_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "amberTorsion.sip"
	#include <BALL/MOLMEC/AMBER/amberTorsion.h>
	using namespace BALL;
#line 15 "../CPP/sipBALLAmberTorsion.h"

extern SIP_EXPORT PyObject *sipClass_AmberTorsion;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AmberTorsion[];

extern SIP_EXPORT const void *sipCast_AmberTorsion Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_AmberTorsion Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAmberTorsion : public AmberTorsion
{
public:
	sipAmberTorsion();
	sipAmberTorsion(ForceField&);
	sipAmberTorsion(const AmberTorsion&,bool);
	sipAmberTorsion(const AmberTorsion&);
	~sipAmberTorsion();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_AmberTorsion Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AmberTorsion Py_PROTO((PyObject *,AmberTorsion **,int,int *));
extern SIP_EXPORT AmberTorsion *sipForceConvertTo_AmberTorsion Py_PROTO((PyObject *,int *));

#endif

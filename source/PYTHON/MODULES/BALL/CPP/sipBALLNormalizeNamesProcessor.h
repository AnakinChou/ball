// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Aug  7 17:00:29 2000

#ifndef _BALLNormalizeNamesProcessor_H
#define	_BALLNormalizeNamesProcessor_H

#include "sipBALLFragmentProcessor.h"
#include "sipBALLFragmentDB.h"
#include "sipBALLString.h"
#include "sipBALLFragment.h"

#line 68 "fragmentDB.sip"
	#include <BALL/STRUCTURE/fragmentDB.h>
	typedef FragmentDB::NormalizeNamesProcessor NormalizeNamesProcessor;
	using namespace BALL;
#line 18 "../CPP/sipBALLNormalizeNamesProcessor.h"

extern SIP_EXPORT PyObject *sipClass_NormalizeNamesProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_NormalizeNamesProcessor[];

extern SIP_EXPORT const void *sipCast_NormalizeNamesProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_NormalizeNamesProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipNormalizeNamesProcessor : public NormalizeNamesProcessor
{
public:
	sipNormalizeNamesProcessor();
	sipNormalizeNamesProcessor(FragmentDB&);
	sipNormalizeNamesProcessor(const NormalizeNamesProcessor&);
	~sipNormalizeNamesProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Fragment&);
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_NormalizeNamesProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_NormalizeNamesProcessor Py_PROTO((PyObject *,NormalizeNamesProcessor **,int,int *));
extern SIP_EXPORT NormalizeNamesProcessor *sipForceConvertTo_NormalizeNamesProcessor Py_PROTO((PyObject *,int *));

#endif

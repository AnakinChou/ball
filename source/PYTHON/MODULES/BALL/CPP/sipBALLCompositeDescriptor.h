// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Jul 24 21:19:18 2000

#ifndef _BALLCompositeDescriptor_H
#define	_BALLCompositeDescriptor_H

#include "sipBALLString.h"
#include "sipBALLVector3.h"
#include "sipBALLBox3.h"
#include "sipBALLQuaternion.h"
#include "sipBALLAngle.h"
#include "sipBALLComposite.h"

#line 6 "compositeDescriptor.sip"
	#include <BALL/VIEW/OPENGL/KERNEL/compositeDescriptor.h>
  #include <BALL/PYTHON/pyBALLSipHelper.h> 
	using namespace BALL;
	using namespace VIEW;
#line 21 "../CPP/sipBALLCompositeDescriptor.h"

extern SIP_EXPORT PyObject *sipClass_CompositeDescriptor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CompositeDescriptor[];

extern SIP_EXPORT const void *sipCast_CompositeDescriptor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_CompositeDescriptor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCompositeDescriptor : public CompositeDescriptor
{
public:
	sipCompositeDescriptor();
	sipCompositeDescriptor(const CompositeDescriptor&,bool);
	sipCompositeDescriptor(const CompositeDescriptor&);
	~sipCompositeDescriptor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void clear();
	void destroy();
	bool isValid() const;
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);
	static void sipVH_destroy(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_CompositeDescriptor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CompositeDescriptor Py_PROTO((PyObject *,CompositeDescriptor **,int,int *));
extern SIP_EXPORT CompositeDescriptor *sipForceConvertTo_CompositeDescriptor Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Thu Jan 11 16:41:16 2001

#ifndef _BALLRuleProcessor_H
#define	_BALLRuleProcessor_H

#include "sipBALLAtomProcessor.h"
#include "sipBALLINIFile.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 7 "ruleProcessor.sip"
	#include <BALL/MOLMEC/COMMON/ruleProcessor.h>
#line 16 "../CPP/sipBALLRuleProcessor.h"

extern SIP_EXPORT PyObject *sipClass_RuleProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_RuleProcessor[];

extern SIP_EXPORT const void *sipCast_RuleProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_RuleProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipRuleProcessor : public RuleProcessor
{
public:
	sipRuleProcessor();
	sipRuleProcessor(INIFile&,const String&);
	sipRuleProcessor(const RuleProcessor&);
	~sipRuleProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Atom&);
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_RuleProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_RuleProcessor Py_PROTO((PyObject *,RuleProcessor **,int,int *));
extern SIP_EXPORT RuleProcessor *sipForceConvertTo_RuleProcessor Py_PROTO((PyObject *,int *));

#endif

// C++ interface header file.
//
// Generated by SIP v2.5pre4 on Sun Jul 29 13:00:58 2001

#ifndef _BALLGeometricCenterProcessor_h
#define	_BALLGeometricCenterProcessor_h


#include "sipBALLAtomProcessor.h"
#include "sipBALLAtom.h"
#include "sipBALLVector3.h"

#line 26 "geometricProperties.sip"
	#include <BALL/STRUCTURE/geometricProperties.h>
	using namespace BALL;
	typedef UnaryProcessor<Atom> AtomProcessor;
#line 18 "sipBALLGeometricCenterProcessor.h"

extern SIP_EXPORT PyObject *sipClass_GeometricCenterProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_GeometricCenterProcessor[];

extern SIP_EXPORT const void *sipCast_GeometricCenterProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_GeometricCenterProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipGeometricCenterProcessor : public GeometricCenterProcessor
{
public:
	sipGeometricCenterProcessor();
	sipGeometricCenterProcessor(const GeometricCenterProcessor&);
	~sipGeometricCenterProcessor();
	Processor::Result operator()(Atom&) throw();
	bool finish() throw();
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);
	bool start() throw();
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipGeometricCenterProcessor(const sipGeometricCenterProcessor &);
	sipGeometricCenterProcessor &operator = (const sipGeometricCenterProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_GeometricCenterProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_GeometricCenterProcessor Py_PROTO((PyObject *,GeometricCenterProcessor **,int,int *));
extern SIP_EXPORT GeometricCenterProcessor *sipForceConvertTo_GeometricCenterProcessor Py_PROTO((PyObject *,int *));

#endif

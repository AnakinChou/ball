// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Wed Aug 15 16:06:14 2001

#ifndef _BALLCharmmNonBonded_h
#define	_BALLCharmmNonBonded_h


#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "charmmNonBonded.sip"
	#include <BALL/MOLMEC/CHARMM/charmmNonBonded.h>
	using namespace BALL;
#line 16 "sipBALLCharmmNonBonded.h"

extern SIP_EXPORT PyObject *sipClass_CharmmNonBonded;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CharmmNonBonded[];

extern "C" SIP_EXPORT const void *sipCast_CharmmNonBonded Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_CharmmNonBonded Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCharmmNonBonded : public CharmmNonBonded
{
public:
	sipCharmmNonBonded();
	sipCharmmNonBonded(ForceField&);
	sipCharmmNonBonded(const CharmmNonBonded&,bool);
	sipCharmmNonBonded(const CharmmNonBonded&);
	~sipCharmmNonBonded() throw();
	double getEnergy() const;
	double getSolvationEnergy() const throw();
	static double sipVH_getSolvationEnergy(const sipMethodCache *,sipThisType *,int);
	double getVdwEnergy() const throw();
	static double sipVH_getVdwEnergy(const sipMethodCache *,sipThisType *,int);
	double getElectrostaticEnergy() const throw();
	static double sipVH_getElectrostaticEnergy(const sipMethodCache *,sipThisType *,int);
	void updateForces() throw();
	double updateEnergy() throw();
	bool setup() throw();

	sipThisType *sipPyThis;

private:
	sipCharmmNonBonded(const sipCharmmNonBonded &);
	sipCharmmNonBonded &operator = (const sipCharmmNonBonded &);

	sipMethodCache sipPyMethods[7];
};

extern SIP_EXPORT int sipCanConvertTo_CharmmNonBonded Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CharmmNonBonded Py_PROTO((PyObject *,CharmmNonBonded **,int,int *));
extern SIP_EXPORT CharmmNonBonded *sipForceConvertTo_CharmmNonBonded Py_PROTO((PyObject *,int *));

#endif

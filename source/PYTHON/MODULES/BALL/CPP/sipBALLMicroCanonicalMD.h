// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Aug  7 19:45:42 2000

#ifndef _BALLMicroCanonicalMD_H
#define	_BALLMicroCanonicalMD_H

#include "sipBALLMolecularDynamics.h"
#include "sipBALLForceField.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLOptions.h"

#line 7 "microCanonicalMD.sip"
  #include <BALL/MOLMEC/MDSIMULATION/microCanonicalMD.h>
  using namespace BALL;
#line 17 "../CPP/sipBALLMicroCanonicalMD.h"

extern SIP_EXPORT PyObject *sipClass_MicroCanonicalMD;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_MicroCanonicalMD[];

extern SIP_EXPORT const void *sipCast_MicroCanonicalMD Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_MicroCanonicalMD Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipMicroCanonicalMD : public MicroCanonicalMD
{
public:
	sipMicroCanonicalMD();
	sipMicroCanonicalMD(ForceField&);
	sipMicroCanonicalMD(ForceField&,SnapShotManager *);
	sipMicroCanonicalMD(ForceField&,SnapShotManager *,const Options&);
	sipMicroCanonicalMD(const MicroCanonicalMD&,bool);
	sipMicroCanonicalMD(const MicroCanonicalMD&);
	~sipMicroCanonicalMD();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool setup(ForceField&,SnapShotManager *,const Options&);
	bool setup(ForceField&,SnapShotManager *);
	bool specificSetup();
	void setTimeStep(double);
	void simulate(bool);
	void simulateIterations(int,bool);
	void simulateTime(double,bool);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[6];
};

extern SIP_EXPORT int sipCanConvertTo_MicroCanonicalMD Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_MicroCanonicalMD Py_PROTO((PyObject *,MicroCanonicalMD **,int,int *));
extern SIP_EXPORT MicroCanonicalMD *sipForceConvertTo_MicroCanonicalMD Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jan 23 19:05:41 2001

#ifndef _BALLChargeRuleProcessor_H
#define	_BALLChargeRuleProcessor_H

#include "sipBALLRuleProcessor.h"
#include "sipBALLINIFile.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 8 "chargeRuleProcessor.sip"
	#include <BALL/MOLMEC/COMMON/chargeRuleProcessor.h>
#line 16 "../CPP/sipBALLChargeRuleProcessor.h"

extern SIP_EXPORT PyObject *sipClass_ChargeRuleProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ChargeRuleProcessor[];

extern SIP_EXPORT const void *sipCast_ChargeRuleProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ChargeRuleProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipChargeRuleProcessor : public ChargeRuleProcessor
{
public:
	sipChargeRuleProcessor();
	sipChargeRuleProcessor(INIFile&,const String&);
	sipChargeRuleProcessor(const ChargeRuleProcessor&);
	~sipChargeRuleProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Atom&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_ChargeRuleProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ChargeRuleProcessor Py_PROTO((PyObject *,ChargeRuleProcessor **,int,int *));
extern SIP_EXPORT ChargeRuleProcessor *sipForceConvertTo_ChargeRuleProcessor Py_PROTO((PyObject *,int *));

#endif

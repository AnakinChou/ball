// C++ wrapper class header file.
//
// Generated by SIP v2.4 on Wed Jul 25 07:17:27 2001

#ifndef _BALLBuildBondsProcessor_H
#define	_BALLBuildBondsProcessor_H

#include "sipBALLFragmentProcessor.h"
#include "sipBALLFragmentDB.h"
#include "sipBALLFragment.h"

#line 110 "fragmentDB.sip"
	#include <BALL/STRUCTURE/fragmentDB.h>
	typedef FragmentDB::BuildBondsProcessor BuildBondsProcessor;
	using namespace BALL;
#line 17 "sipBALLBuildBondsProcessor.h"

extern SIP_EXPORT PyObject *sipClass_BuildBondsProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_BuildBondsProcessor[];

extern SIP_EXPORT const void *sipCast_BuildBondsProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_BuildBondsProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipBuildBondsProcessor : public BuildBondsProcessor
{
public:
	sipBuildBondsProcessor();
	sipBuildBondsProcessor(const FragmentDB&);
	sipBuildBondsProcessor(const BuildBondsProcessor&);
	~sipBuildBondsProcessor();
	Processor::Result operator ()(Fragment&);
	bool start();
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	bool finish();
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipBuildBondsProcessor(const sipBuildBondsProcessor &);
	sipBuildBondsProcessor &operator = (const sipBuildBondsProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_BuildBondsProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_BuildBondsProcessor Py_PROTO((PyObject *,BuildBondsProcessor **,int,int *));
extern SIP_EXPORT BuildBondsProcessor *sipForceConvertTo_BuildBondsProcessor Py_PROTO((PyObject *,int *));

#endif

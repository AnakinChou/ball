// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Aug 30 21:44:03 2000

#ifndef _BALLAmberBend_H
#define	_BALLAmberBend_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "amberBend.sip"
	#include <BALL/MOLMEC/AMBER/amberBend.h>
	using namespace BALL;
#line 15 "../CPP/sipBALLAmberBend.h"

extern SIP_EXPORT PyObject *sipClass_AmberBend;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AmberBend[];

extern SIP_EXPORT const void *sipCast_AmberBend Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_AmberBend Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAmberBend : public AmberBend
{
public:
	sipAmberBend();
	sipAmberBend(ForceField&);
	sipAmberBend(const AmberBend&,bool);
	sipAmberBend(const AmberBend&);
	~sipAmberBend();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_AmberBend Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AmberBend Py_PROTO((PyObject *,AmberBend **,int,int *));
extern SIP_EXPORT AmberBend *sipForceConvertTo_AmberBend Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v2.4 on Wed Jul 25 07:17:27 2001

#ifndef _BALLSelector_H
#define	_BALLSelector_H

#include "sipBALLCompositeProcessor.h"
#include "sipBALLString.h"
#include "sipBALLComposite.h"

#line 8 "selector.sip"
	#include <BALL/KERNEL/selector.h>
	using namespace BALL;
	typedef UnaryProcessor<Composite> CompositeProcessor;
#line 17 "sipBALLSelector.h"

extern SIP_EXPORT PyObject *sipClass_Selector;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Selector[];

extern SIP_EXPORT const void *sipCast_Selector Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_Selector Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipSelector : public Selector
{
public:
	sipSelector();
	sipSelector(const Selector&);
	sipSelector(const String&);
	~sipSelector() throw();
	bool start() throw();
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	Processor::Result operator ()(Composite&) throw();

	sipThisType *sipPyThis;

private:
	sipSelector(const sipSelector &);
	sipSelector &operator = (const sipSelector &);

	sipMethodCache sipPyMethods[2];
};

extern SIP_EXPORT int sipCanConvertTo_Selector Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Selector Py_PROTO((PyObject *,Selector **,int,int *));
extern SIP_EXPORT Selector *sipForceConvertTo_Selector Py_PROTO((PyObject *,int *));

#endif

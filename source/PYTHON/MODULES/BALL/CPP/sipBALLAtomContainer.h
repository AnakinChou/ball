// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Fri Jan 26 17:38:02 2001

#ifndef _BALLAtomContainer_H
#define	_BALLAtomContainer_H

#include "sipBALLComposite.h"
#include "sipBALLPropertyManager.h"
#include "sipBALLString.h"
#include "sipBALLMolecule.h"
#include "sipBALLPosition.h"
#include "sipBALLAtom.h"
#include "sipBALLAtomProcessor.h"
#include "sipBALLCompositeProcessor.h"
#include "sipBALLFragmentProcessor.h"
#include "sipBALLResidueProcessor.h"

#line 8 "atomContainer.sip"
	#include <BALL/KERNEL/atomContainer.h>
	using namespace BALL;
#line 23 "../CPP/sipBALLAtomContainer.h"

extern SIP_EXPORT PyObject *sipClass_AtomContainer;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AtomContainer[];

extern SIP_EXPORT const void *sipCast_AtomContainer Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_AtomContainer Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAtomContainer : public AtomContainer
{
public:
	sipAtomContainer();
	sipAtomContainer(const AtomContainer&,bool);
	sipAtomContainer(const String&);
	sipAtomContainer(const AtomContainer&);
	~sipAtomContainer();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void select();
	void deselect();
	void clear();
	void destroy();
	bool isValid() const;

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_AtomContainer Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AtomContainer Py_PROTO((PyObject *,AtomContainer **,int,int *));
extern SIP_EXPORT AtomContainer *sipForceConvertTo_AtomContainer Py_PROTO((PyObject *,int *));

#endif

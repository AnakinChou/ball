// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Jul 24 21:19:18 2000

#ifndef _BALLTransformationProcessor_H
#define	_BALLTransformationProcessor_H

#include "sipBALLAtomProcessor.h"
#include "sipBALLMatrix4x4.h"
#include "sipBALLAtom.h"

#line 25 "geometricTransformations.sip"
	#include <BALL/STRUCTURE/geometricTransformations.h>
	using namespace BALL;
	typedef UnaryProcessor<Atom> AtomProcessor;
#line 17 "../CPP/sipBALLTransformationProcessor.h"

extern SIP_EXPORT PyObject *sipClass_TransformationProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_TransformationProcessor[];

extern SIP_EXPORT const void *sipCast_TransformationProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_TransformationProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipTransformationProcessor : public TransformationProcessor
{
public:
	sipTransformationProcessor();
	sipTransformationProcessor(const Matrix4x4&);
	sipTransformationProcessor(const TransformationProcessor&);
	~sipTransformationProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	Processor::Result operator()(Atom&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_TransformationProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_TransformationProcessor Py_PROTO((PyObject *,TransformationProcessor **,int,int *));
extern SIP_EXPORT TransformationProcessor *sipForceConvertTo_TransformationProcessor Py_PROTO((PyObject *,int *));

#endif

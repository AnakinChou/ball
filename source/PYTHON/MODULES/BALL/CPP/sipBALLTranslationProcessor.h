// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Wed Aug 15 16:06:14 2001

#ifndef _BALLTranslationProcessor_h
#define	_BALLTranslationProcessor_h


#include "sipBALLAtomProcessor.h"
#include "sipBALLVector3.h"
#include "sipBALLAtom.h"

#line 8 "geometricTransformations.sip"
	#include <BALL/STRUCTURE/geometricTransformations.h>
	using namespace BALL;
	typedef UnaryProcessor<Atom> AtomProcessor;
#line 18 "sipBALLTranslationProcessor.h"

extern SIP_EXPORT PyObject *sipClass_TranslationProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_TranslationProcessor[];

extern "C" SIP_EXPORT const void *sipCast_TranslationProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_TranslationProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipTranslationProcessor : public TranslationProcessor
{
public:
	sipTranslationProcessor();
	sipTranslationProcessor(const Vector3&);
	sipTranslationProcessor(const TranslationProcessor&);
	~sipTranslationProcessor();
	Processor::Result operator()(Atom&);

	sipThisType *sipPyThis;

private:
	sipTranslationProcessor(const sipTranslationProcessor &);
	sipTranslationProcessor &operator = (const sipTranslationProcessor &);

	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_TranslationProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_TranslationProcessor Py_PROTO((PyObject *,TranslationProcessor **,int,int *));
extern SIP_EXPORT TranslationProcessor *sipForceConvertTo_TranslationProcessor Py_PROTO((PyObject *,int *));

#endif

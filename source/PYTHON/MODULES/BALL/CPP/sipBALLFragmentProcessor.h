// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Aug  7 13:57:27 2000

#ifndef _BALLFragmentProcessor_H
#define	_BALLFragmentProcessor_H

#include "sipBALLFragment.h"

#line 6 "pyFragmentProcessor.sip"
	#include <BALL/CONCEPT/processor.h>
	typedef UnaryProcessor<Fragment> FragmentProcessor;
#line 14 "../CPP/sipBALLFragmentProcessor.h"

extern SIP_EXPORT PyObject *sipClass_FragmentProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_FragmentProcessor[];

extern SIP_EXPORT const void *sipCast_FragmentProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_FragmentProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipFragmentProcessor : public FragmentProcessor
{
public:
	sipFragmentProcessor();
	sipFragmentProcessor(const FragmentProcessor&);
	~sipFragmentProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	Processor::Result operator()(Fragment&);
	static Processor::Result sipVH_Operator__call__(const sipMethodCache *,sipThisType *,int,Fragment&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_FragmentProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_FragmentProcessor Py_PROTO((PyObject *,FragmentProcessor **,int,int *));
extern SIP_EXPORT FragmentProcessor *sipForceConvertTo_FragmentProcessor Py_PROTO((PyObject *,int *));

#endif

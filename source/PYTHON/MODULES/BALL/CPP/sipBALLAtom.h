// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 25 16:53:43 2000

#ifndef _BALLAtom_H
#define	_BALLAtom_H

#include "sipBALLComposite.h"
#include "sipBALLPropertyManager.h"
#include "sipBALLElement.h"
#include "sipBALLString.h"
#include "sipBALLVector3.h"
#include "sipBALLMolecule.h"
#include "sipBALLFragment.h"
#include "sipBALLAtomType.h"
#include "sipBALLBond.h"
#include "sipBALLPosition.h"

#line 8 "atom.sip"
	#include <BALL/KERNEL/atom.h>
	using namespace BALL;
	typedef Atom::Type AtomType;
#line 24 "../CPP/sipBALLAtom.h"

extern SIP_EXPORT PyObject *sipClass_Atom;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Atom[];

extern SIP_EXPORT const void *sipCast_Atom Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_Atom Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAtom : public Atom
{
public:
	sipAtom();
	sipAtom(const Atom&,bool);
	sipAtom(Element&,const String&,const String&,int,const Vector3&,const Vector3&,const Vector3&,float,float);
	sipAtom(const Atom&);
	~sipAtom();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void select();
	void deselect();
	void clear();
	void destroy();
	bool isValid() const;

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_Atom Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Atom Py_PROTO((PyObject *,Atom **,int,int *));
extern SIP_EXPORT Atom *sipForceConvertTo_Atom Py_PROTO((PyObject *,int *));

#endif

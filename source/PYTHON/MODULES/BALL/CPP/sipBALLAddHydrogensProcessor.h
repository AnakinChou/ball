// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Nov 15 12:43:50 2000

#ifndef _BALLAddHydrogensProcessor_H
#define	_BALLAddHydrogensProcessor_H

#include "sipBALLFragmentProcessor.h"
#include "sipBALLFragmentDB.h"
#include "sipBALLFragment.h"

#line 90 "fragmentDB.sip"
	#include <BALL/STRUCTURE/fragmentDB.h>
	typedef FragmentDB::AddHydrogensProcessor AddHydrogensProcessor;
	using namespace BALL;
#line 17 "../CPP/sipBALLAddHydrogensProcessor.h"

extern SIP_EXPORT PyObject *sipClass_AddHydrogensProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AddHydrogensProcessor[];

extern SIP_EXPORT const void *sipCast_AddHydrogensProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_AddHydrogensProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAddHydrogensProcessor : public AddHydrogensProcessor
{
public:
	sipAddHydrogensProcessor();
	sipAddHydrogensProcessor(const FragmentDB&);
	sipAddHydrogensProcessor(const AddHydrogensProcessor&);
	~sipAddHydrogensProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Fragment&);
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_AddHydrogensProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AddHydrogensProcessor Py_PROTO((PyObject *,AddHydrogensProcessor **,int,int *));
extern SIP_EXPORT AddHydrogensProcessor *sipForceConvertTo_AddHydrogensProcessor Py_PROTO((PyObject *,int *));

#endif

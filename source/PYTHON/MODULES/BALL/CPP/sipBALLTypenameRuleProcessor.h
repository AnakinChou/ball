// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 07:14:16 2001

#ifndef _BALLTypenameRuleProcessor_h
#define	_BALLTypenameRuleProcessor_h


#include "sipBALLRuleProcessor.h"
#include "sipBALLINIFile.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 7 "typenameRuleProcessor.sip"
  #include <BALL/MOLMEC/COMMON/typenameRuleProcessor.h>
  using namespace BALL;
#line 18 "sipBALLTypenameRuleProcessor.h"

extern SIP_EXPORT PyObject *sipClass_TypenameRuleProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_TypenameRuleProcessor[];

extern "C" SIP_EXPORT const void *sipCast_TypenameRuleProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_TypenameRuleProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipTypenameRuleProcessor : public TypenameRuleProcessor
{
public:
	sipTypenameRuleProcessor();
	sipTypenameRuleProcessor(INIFile&,const String&);
	sipTypenameRuleProcessor(const TypenameRuleProcessor&);
	~sipTypenameRuleProcessor();
	bool finish();
	bool start();
	Processor::Result operator()(Atom&);

	sipThisType *sipPyThis;

private:
	sipTypenameRuleProcessor(const sipTypenameRuleProcessor &);
	sipTypenameRuleProcessor &operator = (const sipTypenameRuleProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_TypenameRuleProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_TypenameRuleProcessor Py_PROTO((PyObject *,TypenameRuleProcessor **,int,int *));
extern SIP_EXPORT TypenameRuleProcessor *sipForceConvertTo_TypenameRuleProcessor Py_PROTO((PyObject *,int *));

#endif

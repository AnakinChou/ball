// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 07:14:16 2001

#ifndef _BALLResidueProcessor_h
#define	_BALLResidueProcessor_h


#include "sipBALLResidue.h"

#line 6 "pyResidueProcessor.sip"
	#include <BALL/CONCEPT/processor.h>
	typedef UnaryProcessor<Residue> ResidueProcessor;
#line 15 "sipBALLResidueProcessor.h"

extern SIP_EXPORT PyObject *sipClass_ResidueProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ResidueProcessor[];

extern "C" SIP_EXPORT const void *sipCast_ResidueProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_ResidueProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipResidueProcessor : public ResidueProcessor
{
public:
	sipResidueProcessor();
	sipResidueProcessor(const ResidueProcessor&);
	~sipResidueProcessor();
	Processor::Result operator()(Residue&);
	static Processor::Result sipVH_CallOp(const sipMethodCache *,sipThisType *,int,Residue&);

	sipThisType *sipPyThis;

private:
	sipResidueProcessor(const sipResidueProcessor &);
	sipResidueProcessor &operator = (const sipResidueProcessor &);

	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_ResidueProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ResidueProcessor Py_PROTO((PyObject *,ResidueProcessor **,int,int *));
extern SIP_EXPORT ResidueProcessor *sipForceConvertTo_ResidueProcessor Py_PROTO((PyObject *,int *));

#endif

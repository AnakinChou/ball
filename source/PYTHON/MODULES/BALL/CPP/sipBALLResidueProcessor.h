// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Mon Aug 28 17:40:26 2000

#ifndef _BALLResidueProcessor_H
#define	_BALLResidueProcessor_H

#include "sipBALLResidue.h"

#line 6 "pyResidueProcessor.sip"
	#include <BALL/CONCEPT/processor.h>
	typedef UnaryProcessor<Residue> ResidueProcessor;
#line 14 "../CPP/sipBALLResidueProcessor.h"

extern SIP_EXPORT PyObject *sipClass_ResidueProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ResidueProcessor[];

extern SIP_EXPORT const void *sipCast_ResidueProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ResidueProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipResidueProcessor : public ResidueProcessor
{
public:
	sipResidueProcessor();
	sipResidueProcessor(const ResidueProcessor&);
	~sipResidueProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	Processor::Result operator()(Residue&);
	static Processor::Result sipVH_Operator__call__(const sipMethodCache *,sipThisType *,int,Residue&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_ResidueProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ResidueProcessor Py_PROTO((PyObject *,ResidueProcessor **,int,int *));
extern SIP_EXPORT ResidueProcessor *sipForceConvertTo_ResidueProcessor Py_PROTO((PyObject *,int *));

#endif

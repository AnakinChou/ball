// C++ wrapper class header file.
//
// Generated by SIP v2.4 on Wed Jul 25 07:17:27 2001

#ifndef _BALLEnergyMinimizer_H
#define	_BALLEnergyMinimizer_H

#include "sipBALLForceField.h"
#include "sipBALLOptions.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLGradient.h"

#line 4 "energyMinimizer.sip"
#include <BALL/MOLMEC/MINIMIZATION/energyMinimizer.h>
using namespace BALL;
#line 17 "sipBALLEnergyMinimizer.h"

extern SIP_EXPORT PyObject *sipClass_EnergyMinimizer;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_EnergyMinimizer[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_EnergyMinimizer[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_EnergyMinimizer[];

extern SIP_EXPORT const void *sipCast_EnergyMinimizer Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_EnergyMinimizer Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipEnergyMinimizer : public EnergyMinimizer
{
public:
	sipEnergyMinimizer();
	sipEnergyMinimizer(ForceField&);
	sipEnergyMinimizer(ForceField&,Options&);
	sipEnergyMinimizer(const EnergyMinimizer&,bool);
	sipEnergyMinimizer(const EnergyMinimizer&);
	~sipEnergyMinimizer();
	bool minimize(int,bool);
	static bool sipVH_minimize(const sipMethodCache *,sipThisType *,int,int,bool);
	void finishIteration();
	static void sipVH_finishIteration(const sipMethodCache *,sipThisType *,int);
	void takeSnapShot() const;
	static void sipVH_takeSnapShot(const sipMethodCache *,sipThisType *,int);
	void printEnergy() const;
	static void sipVH_printEnergy(const sipMethodCache *,sipThisType *,int);
	void updateForces();
	static void sipVH_updateForces(const sipMethodCache *,sipThisType *,int);
	double updateEnergy();
	static double sipVH_updateEnergy(const sipMethodCache *,sipThisType *,int);
	void updateDirection();
	static void sipVH_updateDirection(const sipMethodCache *,sipThisType *,int);
	bool findStep();
	static bool sipVH_findStep(const sipMethodCache *,sipThisType *,int);
	bool isConverged() const;
	static bool sipVH_isConverged(const sipMethodCache *,sipThisType *,int);
	bool specificSetup();
	static bool sipVH_specificSetup(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipEnergyMinimizer(const sipEnergyMinimizer &);
	sipEnergyMinimizer &operator = (const sipEnergyMinimizer &);

	sipMethodCache sipPyMethods[10];
};

extern SIP_EXPORT int sipCanConvertTo_EnergyMinimizer Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_EnergyMinimizer Py_PROTO((PyObject *,EnergyMinimizer **,int,int *));
extern SIP_EXPORT EnergyMinimizer *sipForceConvertTo_EnergyMinimizer Py_PROTO((PyObject *,int *));

#endif

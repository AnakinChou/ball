// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Apr 10 04:59:42 2001

#ifndef _BALLSnapShotManager_H
#define	_BALLSnapShotManager_H

#include "sipBALLSystem.h"
#include "sipBALLForceField.h"
#include "sipBALLTrajectoryFile.h"
#include "sipBALLOptions.h"

#line 6 "snapShotManager.sip"
	#include <BALL/MOLMEC/COMMON/snapShotManager.h>
	using namespace BALL;
#line 17 "../CPP/sipBALLSnapShotManager.h"

extern SIP_EXPORT PyObject *sipClass_SnapShotManager;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_SnapShotManager[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_SnapShotManager[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_SnapShotManager[];

extern SIP_EXPORT const void *sipCast_SnapShotManager Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_SnapShotManager Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipSnapShotManager : public SnapShotManager
{
public:
	sipSnapShotManager();
	sipSnapShotManager(System *,const ForceField *,TrajectoryFile *,bool);
	sipSnapShotManager(System *,const ForceField *,const Options&,TrajectoryFile *,bool);
	sipSnapShotManager(const SnapShotManager&);
	~sipSnapShotManager();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool setup();
	void clear();
	bool isValid() const;
	void takeSnapShot();
	bool applySnapShot(int);
	bool applyFirstSnapShot();
	bool applyNextSnapShot();
	bool applyLastSnapShot();
	void flushToDisk();
	static bool sipVH_setup(const sipMethodCache *,sipThisType *,int);
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);
	static void sipVH_takeSnapShot(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_applySnapShot(const sipMethodCache *,sipThisType *,int,int);
	static bool sipVH_applyFirstSnapShot(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_applyNextSnapShot(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_applyLastSnapShot(const sipMethodCache *,sipThisType *,int);
	static void sipVH_flushToDisk(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[9];
};

extern SIP_EXPORT int sipCanConvertTo_SnapShotManager Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_SnapShotManager Py_PROTO((PyObject *,SnapShotManager **,int,int *));
extern SIP_EXPORT SnapShotManager *sipForceConvertTo_SnapShotManager Py_PROTO((PyObject *,int *));

#endif

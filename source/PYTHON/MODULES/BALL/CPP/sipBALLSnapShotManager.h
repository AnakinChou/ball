// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Tue Jul 31 20:01:05 2001

#ifndef _BALLSnapShotManager_h
#define	_BALLSnapShotManager_h


#include "sipBALLOptions.h"
#include "sipBALLSystem.h"
#include "sipBALLForceField.h"
#include "sipBALLTrajectoryFile.h"

#line 5 "snapShotManager.sip"
  #include <BALL/CONCEPT/processor.h>
	#include <BALL/MOLMEC/COMMON/snapShotManager.h>
  using namespace BALL;
#line 19 "sipBALLSnapShotManager.h"

extern SIP_EXPORT PyObject *sipClass_SnapShotManager;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_SnapShotManager[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_SnapShotManager[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_SnapShotManager[];

extern "C" SIP_EXPORT const void *sipCast_SnapShotManager Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_SnapShotManager Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipSnapShotManager : public SnapShotManager
{
public:
	sipSnapShotManager() throw();
	sipSnapShotManager(System *,const ForceField *,TrajectoryFile *,bool) throw();
	sipSnapShotManager(System *,const ForceField *,const Options&,TrajectoryFile *,bool) throw();
	sipSnapShotManager(const SnapShotManager&) throw();
	~sipSnapShotManager() throw();
	void flushToDisk() throw();
	static void sipVH_flushToDisk(const sipMethodCache *,sipThisType *,int);
	bool applyLastSnapShot() throw();
	static bool sipVH_applyLastSnapShot(const sipMethodCache *,sipThisType *,int);
	bool applyNextSnapShot() throw();
	static bool sipVH_applyNextSnapShot(const sipMethodCache *,sipThisType *,int);
	bool applyFirstSnapShot() throw();
	static bool sipVH_applyFirstSnapShot(const sipMethodCache *,sipThisType *,int);
	bool applySnapShot(int) throw();
	static bool sipVH_applySnapShot(const sipMethodCache *,sipThisType *,int,int);
	void takeSnapShot() throw();
	static void sipVH_takeSnapShot(const sipMethodCache *,sipThisType *,int);
	bool isValid() const throw();
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);
	void clear() throw();
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);
	bool setup() throw();
	static bool sipVH_setup(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipSnapShotManager(const sipSnapShotManager &);
	sipSnapShotManager &operator = (const sipSnapShotManager &);

	sipMethodCache sipPyMethods[9];
};

extern SIP_EXPORT int sipCanConvertTo_SnapShotManager Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_SnapShotManager Py_PROTO((PyObject *,SnapShotManager **,int,int *));
extern SIP_EXPORT SnapShotManager *sipForceConvertTo_SnapShotManager Py_PROTO((PyObject *,int *));

#endif

// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Mon Aug 20 19:50:40 2001

#ifndef _BALLTypeRuleProcessor_h
#define	_BALLTypeRuleProcessor_h


#include "sipBALLRuleProcessor.h"
#include "sipBALLINIFile.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 7 "typeRuleProcessor.sip"
	#include <BALL/MOLMEC/COMMON/typeRuleProcessor.h>
	using namespace BALL;
#line 18 "sipBALLTypeRuleProcessor.h"

extern SIP_EXPORT PyObject *sipClass_TypeRuleProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_TypeRuleProcessor[];

extern "C" SIP_EXPORT const void *sipCast_TypeRuleProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_TypeRuleProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipTypeRuleProcessor : public TypeRuleProcessor
{
public:
	sipTypeRuleProcessor();
	sipTypeRuleProcessor(INIFile&,const String&);
	sipTypeRuleProcessor(const TypeRuleProcessor&);
	~sipTypeRuleProcessor();
	bool finish();
	bool start();
	Processor::Result operator()(Atom&);

	sipThisType *sipPyThis;

private:
	sipTypeRuleProcessor(const sipTypeRuleProcessor &);
	sipTypeRuleProcessor &operator = (const sipTypeRuleProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_TypeRuleProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_TypeRuleProcessor Py_PROTO((PyObject *,TypeRuleProcessor **,int,int *));
extern SIP_EXPORT TypeRuleProcessor *sipForceConvertTo_TypeRuleProcessor Py_PROTO((PyObject *,int *));

#endif

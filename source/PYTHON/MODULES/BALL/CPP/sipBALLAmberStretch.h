// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Thu Oct  5 11:55:18 2000

#ifndef _BALLAmberStretch_H
#define	_BALLAmberStretch_H

#include "sipBALLForceFieldComponent.h"
#include "sipBALLForceField.h"

#line 7 "amberStretch.sip"
	#include <BALL/MOLMEC/AMBER/amberStretch.h>
	using namespace BALL;
#line 15 "../CPP/sipBALLAmberStretch.h"

extern SIP_EXPORT PyObject *sipClass_AmberStretch;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AmberStretch[];

extern SIP_EXPORT const void *sipCast_AmberStretch Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_AmberStretch Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAmberStretch : public AmberStretch
{
public:
	sipAmberStretch();
	sipAmberStretch(ForceField&);
	sipAmberStretch(const AmberStretch&,bool);
	sipAmberStretch(const AmberStretch&);
	~sipAmberStretch();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	double getEnergy() const;
	bool setup();
	double updateEnergy();
	void updateForces();

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_AmberStretch Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AmberStretch Py_PROTO((PyObject *,AmberStretch **,int,int *));
extern SIP_EXPORT AmberStretch *sipForceConvertTo_AmberStretch Py_PROTO((PyObject *,int *));

#endif

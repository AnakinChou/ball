// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 25 16:53:42 2000

#ifndef _BALLMolecularDynamics_H
#define	_BALLMolecularDynamics_H

#include "sipBALLForceField.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLOptions.h"

#line 6 "molecularDynamics.sip"
  #include <BALL/MOLMEC/MDSIMULATION/molecularDynamics.h>
  using namespace BALL;
#line 16 "../CPP/sipBALLMolecularDynamics.h"

extern SIP_EXPORT PyObject *sipClass_MolecularDynamics;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_MolecularDynamics[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_MolecularDynamics[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_MolecularDynamics[];

extern SIP_EXPORT const void *sipCast_MolecularDynamics Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_MolecularDynamics Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipMolecularDynamics : public MolecularDynamics
{
public:
	sipMolecularDynamics();
	sipMolecularDynamics(ForceField&);
	sipMolecularDynamics(const MolecularDynamics&,bool);
	sipMolecularDynamics(const MolecularDynamics&);
	~sipMolecularDynamics();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool setup(ForceField&,SnapShotManager *,const Options&);
	bool setup(ForceField&,SnapShotManager *);
	bool specificSetup();
	void setTimeStep(double);
	void simulate(bool);
	void simulateIterations(int,bool);
	void simulateTime(double,bool);
	static bool sipVH_setup(const sipMethodCache *,sipThisType *,int,ForceField&,SnapShotManager *,const Options&);
	static bool sipVH_setup(const sipMethodCache *,sipThisType *,int,ForceField&,SnapShotManager *);
	static bool sipVH_specificSetup(const sipMethodCache *,sipThisType *,int);
	static void sipVH_setTimeStep(const sipMethodCache *,sipThisType *,int,double);
	static void sipVH_simulate(const sipMethodCache *,sipThisType *,int,bool);
	static void sipVH_simulateIterations(const sipMethodCache *,sipThisType *,int,int,bool);
	static void sipVH_simulateTime(const sipMethodCache *,sipThisType *,int,double,bool);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[6];
};

extern SIP_EXPORT int sipCanConvertTo_MolecularDynamics Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_MolecularDynamics Py_PROTO((PyObject *,MolecularDynamics **,int,int *));
extern SIP_EXPORT MolecularDynamics *sipForceConvertTo_MolecularDynamics Py_PROTO((PyObject *,int *));

#endif

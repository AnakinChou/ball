// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 21:25:05 2001

#ifndef _BALLExpressionPredicate_h
#define	_BALLExpressionPredicate_h


#include "sipBALLUnaryAtomPredicate.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 8 "expression.sip"
	#include <BALL/KERNEL/expression.h>
	using namespace BALL;
#line 17 "sipBALLExpressionPredicate.h"

extern SIP_EXPORT PyObject *sipClass_ExpressionPredicate;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ExpressionPredicate[];

extern "C" SIP_EXPORT const void *sipCast_ExpressionPredicate Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_ExpressionPredicate Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipExpressionPredicate : public ExpressionPredicate
{
public:
	sipExpressionPredicate();
	sipExpressionPredicate(const String&);
	sipExpressionPredicate(const ExpressionPredicate&);
	~sipExpressionPredicate() throw();
	void setArgument(const String&) throw();
	static void sipVH_setArgument(const sipMethodCache *,sipThisType *,int,const String&);
	bool operator()(const Atom&) const throw();

	sipThisType *sipPyThis;

private:
	sipExpressionPredicate(const sipExpressionPredicate &);
	sipExpressionPredicate &operator = (const sipExpressionPredicate &);

	sipMethodCache sipPyMethods[2];
};

extern SIP_EXPORT int sipCanConvertTo_ExpressionPredicate Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ExpressionPredicate Py_PROTO((PyObject *,ExpressionPredicate **,int,int *));
extern SIP_EXPORT ExpressionPredicate *sipForceConvertTo_ExpressionPredicate Py_PROTO((PyObject *,int *));

#endif

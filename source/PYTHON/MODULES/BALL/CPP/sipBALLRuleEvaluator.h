// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Thu Jan 11 16:41:16 2001

#ifndef _BALLRuleEvaluator_H
#define	_BALLRuleEvaluator_H

#include "sipBALLINIFile.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 6 "ruleEvaluator.sip"
	#include <BALL/MOLMEC/COMMON/ruleEvaluator.h>
#line 15 "../CPP/sipBALLRuleEvaluator.h"

extern SIP_EXPORT PyObject *sipClass_RuleEvaluator;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_RuleEvaluator[];

extern SIP_EXPORT const void *sipCast_RuleEvaluator Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_RuleEvaluator Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipRuleEvaluator : public RuleEvaluator
{
public:
	sipRuleEvaluator();
	sipRuleEvaluator(INIFile&,const String&);
	sipRuleEvaluator(const RuleEvaluator&);
	~sipRuleEvaluator();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void clear();
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_RuleEvaluator Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_RuleEvaluator Py_PROTO((PyObject *,RuleEvaluator **,int,int *));
extern SIP_EXPORT RuleEvaluator *sipForceConvertTo_RuleEvaluator Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Wed Nov 15 12:43:51 2000

#ifndef _BALLForceFieldComponent_H
#define	_BALLForceFieldComponent_H

#include "sipBALLForceField.h"
#include "sipBALLString.h"

#line 4 "forceFieldComponent.sip"
#include <BALL/MOLMEC/COMMON/forceFieldComponent.h>
using namespace BALL;
#line 15 "../CPP/sipBALLForceFieldComponent.h"

extern SIP_EXPORT PyObject *sipClass_ForceFieldComponent;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ForceFieldComponent[];

extern SIP_EXPORT const void *sipCast_ForceFieldComponent Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ForceFieldComponent Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipForceFieldComponent : public ForceFieldComponent
{
public:
	sipForceFieldComponent();
	sipForceFieldComponent(ForceField&);
	sipForceFieldComponent(const ForceFieldComponent&,bool);
	sipForceFieldComponent(const ForceFieldComponent&);
	~sipForceFieldComponent();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool setup();
	double getEnergy() const;
	double updateEnergy();
	void updateForces();
	static bool sipVH_setup(const sipMethodCache *,sipThisType *,int);
	static double sipVH_getEnergy(const sipMethodCache *,sipThisType *,int);
	static double sipVH_updateEnergy(const sipMethodCache *,sipThisType *,int);
	static void sipVH_updateForces(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_ForceFieldComponent Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ForceFieldComponent Py_PROTO((PyObject *,ForceFieldComponent **,int,int *));
extern SIP_EXPORT ForceFieldComponent *sipForceConvertTo_ForceFieldComponent Py_PROTO((PyObject *,int *));

#endif

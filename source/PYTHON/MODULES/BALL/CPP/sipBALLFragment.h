// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Thu Oct  5 11:55:19 2000

#ifndef _BALLFragment_H
#define	_BALLFragment_H

#include "sipBALLAtomContainer.h"
#include "sipBALLString.h"

#line 7 "fragment.sip"
	#include <BALL/KERNEL/fragment.h>
	using namespace BALL;
#line 15 "../CPP/sipBALLFragment.h"

extern SIP_EXPORT PyObject *sipClass_Fragment;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_Fragment[];

extern SIP_EXPORT const void *sipCast_Fragment Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_Fragment Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipFragment : public Fragment
{
public:
	sipFragment();
	sipFragment(const Fragment&,bool);
	sipFragment(const String&);
	sipFragment(const Fragment&);
	~sipFragment();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void select();
	void deselect();
	void clear();
	void destroy();
	bool isValid() const;

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_Fragment Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_Fragment Py_PROTO((PyObject *,Fragment **,int,int *));
extern SIP_EXPORT Fragment *sipForceConvertTo_Fragment Py_PROTO((PyObject *,int *));

#endif

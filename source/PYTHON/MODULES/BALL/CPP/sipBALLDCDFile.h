// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Apr 10 04:59:44 2001

#ifndef _BALLDCDFile_H
#define	_BALLDCDFile_H

#include "sipBALLTrajectoryFile.h"
#include "sipBALLString.h"
#include "sipBALLOpenMode.h"
#include "sipBALLSnapShotManager.h"
#include "sipBALLSnapShot.h"

#line 7 "DCDFile.sip"
	#include <BALL/FORMAT/DCDFile.h>
	using namespace BALL;
#line 18 "../CPP/sipBALLDCDFile.h"

extern SIP_EXPORT PyObject *sipClass_DCDFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_DCDFile[];

extern SIP_EXPORT const void *sipCast_DCDFile Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_DCDFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipDCDFile : public DCDFile
{
public:
	sipDCDFile();
	sipDCDFile(const DCDFile&);
	sipDCDFile(const String&,OpenMode);
	~sipDCDFile();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void clear();
	bool readHeader();
	bool updateHeader(const SnapShotManager&);
	bool writeHeader();
	bool read(SnapShotManager&);
	bool write(const SnapShotManager&);
	bool append(const SnapShot&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[7];
};

extern SIP_EXPORT int sipCanConvertTo_DCDFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_DCDFile Py_PROTO((PyObject *,DCDFile **,int,int *));
extern SIP_EXPORT DCDFile *sipForceConvertTo_DCDFile Py_PROTO((PyObject *,int *));

#endif

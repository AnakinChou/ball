// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 25 00:09:33 2000

#ifndef _BALLBaseFragment_H
#define	_BALLBaseFragment_H

#include "sipBALLComposite.h"
#include "sipBALLPropertyManager.h"
#include "sipBALLString.h"
#include "sipBALLMolecule.h"
#include "sipBALLPosition.h"
#include "sipBALLAtom.h"
#include "sipBALLAtomProcessor.h"
#include "sipBALLCompositeProcessor.h"

#line 8 "baseFragment.sip"
	#include <BALL/KERNEL/baseFragment.h>
	using namespace BALL;
#line 21 "../CPP/sipBALLBaseFragment.h"

extern SIP_EXPORT PyObject *sipClass_BaseFragment;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_BaseFragment[];

extern SIP_EXPORT const void *sipCast_BaseFragment Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_BaseFragment Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipBaseFragment : public BaseFragment
{
public:
	sipBaseFragment();
	sipBaseFragment(const BaseFragment&,bool);
	sipBaseFragment(const String&);
	sipBaseFragment(const BaseFragment&);
	~sipBaseFragment();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void select();
	void deselect();
	void clear();
	void destroy();
	bool isValid() const;

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[5];
};

extern SIP_EXPORT int sipCanConvertTo_BaseFragment Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_BaseFragment Py_PROTO((PyObject *,BaseFragment **,int,int *));
extern SIP_EXPORT BaseFragment *sipForceConvertTo_BaseFragment Py_PROTO((PyObject *,int *));

#endif

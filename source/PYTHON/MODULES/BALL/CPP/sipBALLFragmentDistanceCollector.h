// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Apr 10 04:59:41 2001

#ifndef _BALLFragmentDistanceCollector_H
#define	_BALLFragmentDistanceCollector_H

#include "sipBALLCompositeProcessor.h"
#include "sipBALLComposite.h"

#line 42 "geometricProperties.sip"
	#include <BALL/STRUCTURE/geometricProperties.h>
	using namespace BALL;
	typedef UnaryProcessor<Composite> CompositeProcessor;
#line 16 "../CPP/sipBALLFragmentDistanceCollector.h"

extern SIP_EXPORT PyObject *sipClass_FragmentDistanceCollector;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_FragmentDistanceCollector[];

extern SIP_EXPORT const void *sipCast_FragmentDistanceCollector Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_FragmentDistanceCollector Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipFragmentDistanceCollector : public FragmentDistanceCollector
{
public:
	sipFragmentDistanceCollector();
	sipFragmentDistanceCollector(const Composite&);
	sipFragmentDistanceCollector(const Composite&,float);
	sipFragmentDistanceCollector(const FragmentDistanceCollector&);
	~sipFragmentDistanceCollector();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Composite&);
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_FragmentDistanceCollector Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_FragmentDistanceCollector Py_PROTO((PyObject *,FragmentDistanceCollector **,int,int *));
extern SIP_EXPORT FragmentDistanceCollector *sipForceConvertTo_FragmentDistanceCollector Py_PROTO((PyObject *,int *));

#endif

// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Wed Aug 15 16:06:14 2001

#ifndef _BALLFragmentDistanceCollector_h
#define	_BALLFragmentDistanceCollector_h


#include "sipBALLCompositeProcessor.h"
#include "sipBALLComposite.h"

#line 42 "geometricProperties.sip"
	#include <BALL/STRUCTURE/geometricProperties.h>
	using namespace BALL;
	typedef UnaryProcessor<Composite> CompositeProcessor;
#line 17 "sipBALLFragmentDistanceCollector.h"

extern SIP_EXPORT PyObject *sipClass_FragmentDistanceCollector;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_FragmentDistanceCollector[];

extern "C" SIP_EXPORT const void *sipCast_FragmentDistanceCollector Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_FragmentDistanceCollector Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipFragmentDistanceCollector : public FragmentDistanceCollector
{
public:
	sipFragmentDistanceCollector();
	sipFragmentDistanceCollector(const Composite&);
	sipFragmentDistanceCollector(const Composite&,float);
	sipFragmentDistanceCollector(const FragmentDistanceCollector&);
	~sipFragmentDistanceCollector() throw();
	Processor::Result operator()(Composite&) throw();
	bool finish() throw();
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);
	bool start() throw();
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipFragmentDistanceCollector(const sipFragmentDistanceCollector &);
	sipFragmentDistanceCollector &operator = (const sipFragmentDistanceCollector &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_FragmentDistanceCollector Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_FragmentDistanceCollector Py_PROTO((PyObject *,FragmentDistanceCollector **,int,int *));
extern SIP_EXPORT FragmentDistanceCollector *sipForceConvertTo_FragmentDistanceCollector Py_PROTO((PyObject *,int *));

#endif

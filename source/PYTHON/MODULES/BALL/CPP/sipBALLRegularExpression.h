// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Mon Aug 20 19:50:40 2001

#ifndef _BALLRegularExpression_h
#define	_BALLRegularExpression_h


#include "sipBALLString.h"
#include "sipBALLIndex.h"
#include "sipBALLSubstring.h"

#line 6 "regExp.sip"
	#include <BALL/DATATYPE/regExp.h>
	using namespace BALL;
#line 17 "sipBALLRegularExpression.h"

extern SIP_EXPORT PyObject *sipClass_RegularExpression;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_RegularExpression[];
extern SIP_EXPORT PyMethodDef sipClassVarTab_RegularExpression[];
extern SIP_EXPORT PyMethodDef *sipClassVarHierTab_RegularExpression[];

extern "C" SIP_EXPORT const void *sipCast_RegularExpression Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_RegularExpression Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipRegularExpression : public RegularExpression
{
public:
	sipRegularExpression();
	sipRegularExpression(const RegularExpression&,bool);
	sipRegularExpression(const String&,bool);
	sipRegularExpression(const RegularExpression&);
	~sipRegularExpression() throw();
	bool isValid() const throw();
	static bool sipVH_isValid(const sipMethodCache *,sipThisType *,int);
	void clear() throw();
	static void sipVH_clear(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipRegularExpression(const sipRegularExpression &);
	sipRegularExpression &operator = (const sipRegularExpression &);

	sipMethodCache sipPyMethods[2];
};

extern SIP_EXPORT int sipCanConvertTo_RegularExpression Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_RegularExpression Py_PROTO((PyObject *,RegularExpression **,int,int *));
extern SIP_EXPORT RegularExpression *sipForceConvertTo_RegularExpression Py_PROTO((PyObject *,int *));

#endif

// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Tue Jul 31 20:01:05 2001

#ifndef _BALLAssignChargeProcessor_h
#define	_BALLAssignChargeProcessor_h


#include "sipBALLAssignRadiusProcessor.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 55 "defaultProcessors.sip"
	#include <BALL/STRUCTURE/defaultProcessors.h>
	using namespace BALL;
#line 17 "sipBALLAssignChargeProcessor.h"

extern SIP_EXPORT PyObject *sipClass_AssignChargeProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_AssignChargeProcessor[];

extern "C" SIP_EXPORT const void *sipCast_AssignChargeProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_AssignChargeProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipAssignChargeProcessor : public AssignChargeProcessor
{
public:
	sipAssignChargeProcessor();
	sipAssignChargeProcessor(const String&);
	sipAssignChargeProcessor(const AssignChargeProcessor&);
	~sipAssignChargeProcessor();
	bool finish();
	Processor::Result operator()(Atom&);
	bool start();

	sipThisType *sipPyThis;

private:
	sipAssignChargeProcessor(const sipAssignChargeProcessor &);
	sipAssignChargeProcessor &operator = (const sipAssignChargeProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_AssignChargeProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_AssignChargeProcessor Py_PROTO((PyObject *,AssignChargeProcessor **,int,int *));
extern SIP_EXPORT AssignChargeProcessor *sipForceConvertTo_AssignChargeProcessor Py_PROTO((PyObject *,int *));

#endif

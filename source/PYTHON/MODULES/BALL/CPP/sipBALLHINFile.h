// C++ interface header file.
//
// Generated by SIP v2.5pre4cvs on Mon Aug 20 19:50:40 2001

#ifndef _BALLHINFile_h
#define	_BALLHINFile_h


#include "sipBALLFile.h"
#include "sipBALLFileNotFound.h"
#include "sipBALLString.h"
#include "sipBALLstd__openmode.h"
#include "sipBALLSystem.h"
#include "sipBALLBox3.h"

#line 7 "HINFile.sip"
	#include <BALL/FORMAT/HINFile.h>
	using namespace BALL;
#line 20 "sipBALLHINFile.h"

extern SIP_EXPORT PyObject *sipClass_HINFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_HINFile[];

extern "C" SIP_EXPORT const void *sipCast_HINFile Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_HINFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipHINFile : public HINFile
{
public:
	sipHINFile();
	sipHINFile(String&,std__openmode) throw(FileNotFound);
	sipHINFile(const HINFile&);
	~sipHINFile() throw();
	HINFile& operator<<(System&);
	static HINFile& sipVH_LShiftOp(const sipMethodCache *,sipThisType *,int,System&);
	HINFile& operator>>(System&);
	static HINFile& sipVH_RShiftOp(const sipMethodCache *,sipThisType *,int,System&);
	void read(System&);
	static void sipVH_read(const sipMethodCache *,sipThisType *,int,System&);
	void write(System&);
	static void sipVH_write(const sipMethodCache *,sipThisType *,int,System&);

	sipThisType *sipPyThis;

private:
	sipHINFile(const sipHINFile &);
	sipHINFile &operator = (const sipHINFile &);

	sipMethodCache sipPyMethods[4];
};

extern SIP_EXPORT int sipCanConvertTo_HINFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_HINFile Py_PROTO((PyObject *,HINFile **,int,int *));
extern SIP_EXPORT HINFile *sipForceConvertTo_HINFile Py_PROTO((PyObject *,int *));

#endif

// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Apr 10 04:59:42 2001

#ifndef _BALLRadiusRuleProcessor_H
#define	_BALLRadiusRuleProcessor_H

#include "sipBALLRuleProcessor.h"
#include "sipBALLINIFile.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 7 "radiusRuleProcessor.sip"
	#include <BALL/MOLMEC/COMMON/radiusRuleProcessor.h>
#line 16 "../CPP/sipBALLRadiusRuleProcessor.h"

extern SIP_EXPORT PyObject *sipClass_RadiusRuleProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_RadiusRuleProcessor[];

extern SIP_EXPORT const void *sipCast_RadiusRuleProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_RadiusRuleProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipRadiusRuleProcessor : public RadiusRuleProcessor
{
public:
	sipRadiusRuleProcessor();
	sipRadiusRuleProcessor(INIFile&,const String&);
	sipRadiusRuleProcessor(const RadiusRuleProcessor&);
	~sipRadiusRuleProcessor();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool start();
	bool finish();
	Processor::Result operator()(Atom&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_RadiusRuleProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_RadiusRuleProcessor Py_PROTO((PyObject *,RadiusRuleProcessor **,int,int *));
extern SIP_EXPORT RadiusRuleProcessor *sipForceConvertTo_RadiusRuleProcessor Py_PROTO((PyObject *,int *));

#endif

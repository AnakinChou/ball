// C++ wrapper class header file.
//
// Generated by SIP v2.4 on Wed Jul 25 07:17:27 2001

#ifndef _BALLBoundingBoxProcessor_H
#define	_BALLBoundingBoxProcessor_H

#include "sipBALLAtomProcessor.h"
#include "sipBALLAtom.h"
#include "sipBALLBox3.h"
#include "sipBALLVector3.h"

#line 8 "geometricProperties.sip"
	#include <BALL/STRUCTURE/geometricProperties.h>
	using namespace BALL;
	typedef UnaryProcessor<Atom> AtomProcessor;
#line 18 "sipBALLBoundingBoxProcessor.h"

extern SIP_EXPORT PyObject *sipClass_BoundingBoxProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_BoundingBoxProcessor[];

extern SIP_EXPORT const void *sipCast_BoundingBoxProcessor Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_BoundingBoxProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipBoundingBoxProcessor : public BoundingBoxProcessor
{
public:
	sipBoundingBoxProcessor();
	sipBoundingBoxProcessor(const BoundingBoxProcessor&);
	~sipBoundingBoxProcessor();
	Processor::Result operator ()(Atom&) throw();
	bool finish() throw();
	static bool sipVH_finish(const sipMethodCache *,sipThisType *,int);
	bool start() throw();
	static bool sipVH_start(const sipMethodCache *,sipThisType *,int);

	sipThisType *sipPyThis;

private:
	sipBoundingBoxProcessor(const sipBoundingBoxProcessor &);
	sipBoundingBoxProcessor &operator = (const sipBoundingBoxProcessor &);

	sipMethodCache sipPyMethods[3];
};

extern SIP_EXPORT int sipCanConvertTo_BoundingBoxProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_BoundingBoxProcessor Py_PROTO((PyObject *,BoundingBoxProcessor **,int,int *));
extern SIP_EXPORT BoundingBoxProcessor *sipForceConvertTo_BoundingBoxProcessor Py_PROTO((PyObject *,int *));

#endif

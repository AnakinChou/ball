// C++ interface header file.
//
// Generated by SIP v2.5 on Thu Aug 23 21:25:05 2001

#ifndef _BALLCompositeProcessor_h
#define	_BALLCompositeProcessor_h


#include "sipBALLComposite.h"

#line 6 "pyCompositeProcessor.sip"
	#include <BALL/CONCEPT/processor.h>
	typedef UnaryProcessor<Composite> CompositeProcessor;
#line 15 "sipBALLCompositeProcessor.h"

extern SIP_EXPORT PyObject *sipClass_CompositeProcessor;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_CompositeProcessor[];

extern "C" SIP_EXPORT const void *sipCast_CompositeProcessor Py_PROTO((const void *,PyObject *));
extern "C" SIP_EXPORT PyObject *sipNew_CompositeProcessor Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipCompositeProcessor : public CompositeProcessor
{
public:
	sipCompositeProcessor();
	sipCompositeProcessor(const CompositeProcessor&);
	~sipCompositeProcessor();
	Processor::Result operator()(Composite&);
	static Processor::Result sipVH_CallOp(const sipMethodCache *,sipThisType *,int,Composite&);

	sipThisType *sipPyThis;

private:
	sipCompositeProcessor(const sipCompositeProcessor &);
	sipCompositeProcessor &operator = (const sipCompositeProcessor &);

	sipMethodCache sipPyMethods[1];
};

extern SIP_EXPORT int sipCanConvertTo_CompositeProcessor Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_CompositeProcessor Py_PROTO((PyObject *,CompositeProcessor **,int,int *));
extern SIP_EXPORT CompositeProcessor *sipForceConvertTo_CompositeProcessor Py_PROTO((PyObject *,int *));

#endif

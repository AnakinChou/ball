// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Tue Jul 18 11:27:59 2000

#ifndef _BALLExpressionPredicate_H
#define	_BALLExpressionPredicate_H

#include "sipBALLUnaryAtomPredicate.h"
#include "sipBALLString.h"
#include "sipBALLAtom.h"

#line 8 "expression.sip"
	#include <BALL/KERNEL/expression.h>
	using namespace BALL;
#line 16 "./sipBALLExpressionPredicate.h"

extern SIP_EXPORT PyObject *sipClass_ExpressionPredicate;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_ExpressionPredicate[];

extern SIP_EXPORT const void *sipCast_ExpressionPredicate Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_ExpressionPredicate Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipExpressionPredicate : public ExpressionPredicate
{
public:
	sipExpressionPredicate();
	sipExpressionPredicate(const String&);
	sipExpressionPredicate(const ExpressionPredicate&);
	~sipExpressionPredicate();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	bool operator()(const Atom&) const;
	void setArgument(const String&);
	static void sipVH_setArgument(const sipMethodCache *,sipThisType *,int,const String&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[2];
};

extern SIP_EXPORT int sipCanConvertTo_ExpressionPredicate Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_ExpressionPredicate Py_PROTO((PyObject *,ExpressionPredicate **,int,int *));
extern SIP_EXPORT ExpressionPredicate *sipForceConvertTo_ExpressionPredicate Py_PROTO((PyObject *,int *));

#endif

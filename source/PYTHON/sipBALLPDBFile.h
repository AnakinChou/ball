// C++ wrapper class header file.
//
// Generated by SIP v0.12 on Fri Jun 30 00:19:15 2000

#ifndef _BALLPDBFile_H
#define	_BALLPDBFile_H

#include "sipBALLString.h"
#include "sipBALLProtein.h"
#include "sipBALLSystem.h"

#line 4 "PDBFile.sip"
#include <BALL/FORMAT/PDBFile.h>
using namespace BALL;
#line 16 "./sipBALLPDBFile.h"

extern SIP_EXPORT PyObject *sipClass_PDBFile;
extern SIP_EXPORT PyMethodDef sipClassAttrTab_PDBFile[];

extern SIP_EXPORT const void *sipCast_PDBFile Py_PROTO((const void *,PyObject *));
extern SIP_EXPORT PyObject *sipNew_PDBFile Py_PROTO((PyObject *,PyObject *));


class SIP_EXPORT sipPDBFile : public PDBFile
{
public:
	sipPDBFile();
	sipPDBFile(const String&,int);
	sipPDBFile(const PDBFile&);
	~sipPDBFile();

       // There is a catcher function for every virtual member function in
       // the class hierachy.

	void read(System&);
	void read(Protein&);
	void write(const System&);
	void write(const Protein&);
	static void sipVH_read(const sipMethodCache *,sipThisType *,int,System&);
	static void sipVH_read(const sipMethodCache *,sipThisType *,int,Protein&);
	static void sipVH_write(const sipMethodCache *,sipThisType *,int,const System&);
	static void sipVH_write(const sipMethodCache *,sipThisType *,int,const Protein&);

	sipThisType *sipPyThis;

private:
	sipMethodCache sipPyMethods[2];
};

extern SIP_EXPORT int sipCanConvertTo_PDBFile Py_PROTO((PyObject *));
extern SIP_EXPORT void sipConvertTo_PDBFile Py_PROTO((PyObject *,PDBFile **,int,int *));
extern SIP_EXPORT PDBFile *sipForceConvertTo_PDBFile Py_PROTO((PyObject *,int *));

#endif

1) System requirements
======================
Compiler:
  BALL requires a more or less ANSI compliant C++ compiler.
  It has been successfully built and tested on the following platforms:

    - Linux/x86 2.x using g++ 3.2.x/3.3.x
    - Linux/x86 2.x using Intel C++ 8.0
    - Solaris/SPARC 8 using g++ 3.2.1
    - IRIX 6.5 using CC 7.3.1.1m (32 and 64 bit)

  We have also successful reports (although with slight problems) for:
		- Microsoft Windows XP using Microsoft Visual Studio .NET (MSVC 7.0)
		- MacOS X (Darwin 7.2) using g++ 3.3
    - Microsoft Windows/cygwin

  (Please refer to Section 2.6 at the bottom of this file for specific hints
  for these platforms)
   

External software and libraries:
  BALL needs flex and bison for automatically generating parsers for
  various purposes. These utilities are standard software and should be
  installed on every contemporary UN*X machine. The newest versions are
  downloadable from http://www.gnu.org/software/.
     
  The usage of GNU make is recommended, although BALL will also build with
  other versions of make. It is available from ftp://ftp.gnu.org/gnu/ and
  easy to install.

  The compilation of the visualization component BALLVIEW also requires
  the QT library (version 3.2.x or above) which is available from

    http://www.trolltech.com/products/qt

  If QT was not installed in one of the standard library paths or the
  QT header files were not installed in one of the compiler's default
  include directories, use "--with-qt-libs=DIR" and "--with-qt-incl=DIR" as
  options to configure (see below, "Building BALL") to specify the paths
  QT was installed to.

  QT also requires OpenGL. On platforms that do not provide OpenGL, MESA can
  be used (e.g. Linux). Mesa is a 3-D graphics library with an API which is 
  very similar to that of OpenGL. It can be obtained from

    http://www.mesa3d.org 

  If MESA is used, please call configure with the option "--with-mesa"


2) Building the libraries
=========================

Building BALL is very easy, but please read through this section carefully
to avoid any problems.  If all requirements stated above are met, BALL is
built by issuing the following commands in the directory BALL/source:

  ./configure
  make

The following sections give further details on the configuration of the
library, on the library files created, how to test the library, and how to
build BALL applications.

2.1 "configure"
---------------

"configure" tries to gather as much information on your system as possible
and then creates the necessary configuration files (config.h, config.mak,
common.mak, and Makefile).

The configuration of BALL may be adapted to your needs and to your system
configuration from the command line by adding one or more of the following
options.  An overview of these options can also be obtained by executing
"configure --help"

  --x-includes=DIR        X include files are in DIR

  --x-libraries=DIR       X library files are in DIR

  --disable-optimization  Do not optimize the library for speed. Might be required for debugging.

  --disable-debuginfo     remove -g from the compiler flags (omit debug information)

  --disable-BALLVIEW      disable the compilation of BALLVIEW, the visualization component

  --enable-64             build 64 bit objects (currently only supported for IRIX MipsPro 
                          compiler)

  --with-compiler=CXX     use CXX to compile BALL

  --with-cxxflags=FLAGS   add C++ compiler FLAGS to compile BALL

  --with-ldflags=FLAGS    add FLAGS to the linker flags used to link the library and
                          applications

  --with-qt-incl=DIR      QT header files are in DIR

  --with-qt-libs=DIR      QT libraries are in DIR

  --with-opengl-incl=DIR  OpenGL/Mesa header files are in DIR/GL

  --with-opengl-libs=DIR  OpenGL/Mesa libraries are in DIR/GL

  --with-mesa             use MESA instead of OpenGL
                          If this option is specified, configure looks for libMesaGLU/libMesaGL.
                          If no libraries with these names are found, configure looks for
                          libGLU and libGL.
                          This switch also add X11 libraries when trying to link agains the Mesa
                          libraries.

  --without-libxnet       use libsocket/libnsl for linking rather than libxnet 
                          this option is useful if some of your libraries (e.g. X11 libs)
                          were linked against libsocket/libnsl

  --help                  display this help information

For example, to compile BALL without the visualization component BALLVIEW,
specify 

  configure --without-BALLVIEW

To include BALLVIEW using the QT installation in /opt/qt/lib and
/opt/qt/include, specify

  configure --with-qt-libs=/opt/qt/lib --with-qt-incl=/opt/qt/include

If Mesa should be used (when compiling under Linux), the correct options
might look like this:

  configure --with-qt-libs=/opt/qt/lib --with-qt-incl=/opt/qt/include --without-opengl
    --with-opengl-libs=/opt/mesa/lib --with-opengl-incl=/opt/mesa/include


2.2) Building the libraries
---------------------------

After the successful termination of configure, "make" builds the shared
libraries. There exist three different libraries:
  libBALL.so:     the BALL library
  libVIEW.so:     the visualization component of BALL

The latter two libraries are not built if "--without-VIEW" is specified
or configure cannot find X libraries, OpenGL libraries, or QT libraries
(and the respective headers).

It is also possible (although not recommended) to build the corresponding
static libraries libBALL.a and libVIEW.a using "make staticlibs".


2.3) Installing the libraries
-----------------------------

After compiling the libraries, they are installed in BALL/lib/${BINFMT}/
when calling "make install.shared" or "make install.static", where
${BINFMT} is the binary format as detrmined by configure.  Currently, the
only way to install the libraries somewhere else is by moving them by hand
to the desired destination.  Whereever you install the shared libraries,
please make sure to include their location in the LD_LIBRARY_PATH
environment variable. This is done as follows
  
   setenv LD_LIBRARY_PATH DIR  (if you are using csh, tcsh or similar shells)

or 
   
   LD_LIBRARY_PATH=DIR         (if you are using sh, bash or similar shells)
   export LD_LIBRARY_PATH

If you installed the shared libraries that are searched by ld by default,
it is not necessary to set the LD_LIBRARY_PATH.


2.4) Testing the library
------------------------

BALL provides an extensive suite of test programs to ensure the correctness
of the code on all platforms. This test suite requires a lot of patience
since the compilation takes quite some time. However, we recommend to run
these tests to ensure that the library is fully operational. At the moment,
the test suite does not yet cover all functionality of BALL, but only some
chosen classes.
The test programs are located in the directory BALL/source/TEST.
To compile and run the test suite, use "make test". Please make sure that
LD_LIBRARY_PATH is correctly set, otherwise the linking of the test
programs will fail.

Each of the test programs tests one or more classes of BALL. When calling a
test, e.g.  Atom_test, the program prints either "OK" (if all tests passed)
or "FAILED" if any of the tests failed. "make test" runs all tests and
complains if certains tets fail.  If this happens, please let us know by
mailing the files specified by in the output of "make test" to one of the
developers - this helps use to improve the library.


2.5) Building applications
--------------------------

BALL provides some short example applications in BALL/source/EXAMPLES as
well as the powerful 3D visualization tool molview.  To build one of these
applications, the shared libraries have to be built and installed, and the
LD_LIBRARY_PATH has to be set accordingly (see above, 2.2).  To build the
examples, simply change to the BALL/source/EXAMPLES directory and type
"make".  Similarly, the viewer molview is build by changing to
BALL/source/MOLVIEW/APPLICATION and calling "make". When running molview,
please make sure that all required shared libraries are included in the
LD_LIBRARY_PATH. molview needs the BALL libraries (libBALL.so and libVIEW.so),
the qt libraries (libqt.so, libqgl.so), and the OpenGL/Mesa libraries 
(libGL.so, libGLU.so).

2.6) Platform-specific Hints
---------------------------

MacOS X: 
  - Make sure you run MacOS X Panther and have g++ 3.3 installed
  - install QT 3.2.3
  - Build static libraries instead of dynamic ones: 
     "make staticlibs"
  - "ranlib" the libraries
     "ranlib libBALL.a libVIEW.a" 
  - install the library:
     "make install.static"
  - Not all tests will succeed -- currently TransformationManager_test fails for 
    some yet unknown reason

Windows/cygwin:
  - should work out of the box without visualization:
    "./configure --without-VIEW"
  - We have no experience with cygwin/QT -- if you manage to get this combination
    to run, please let us know.

Windows/DOT NET:
  - There is an additional file provided with more detailed installation instructions
    on our website

--------------------------------------------------------------------
document revision: $Id: INSTALLATION,v 1.14 2004/02/19 14:09:31 oliver Exp $

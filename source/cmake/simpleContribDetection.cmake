include_directories(../include /usr/include/qt4)
SET(LIB_DIRS "")
SET(SYS_LIBDIR "/usr/lib")
SET(SYS_INCLDIR "/usr/include")
SET(Added_contrIncl 0)
SET(Added_contrLib 0)


if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	SET(DYLIB_EXT "so")
	SET(STATICLIB_EXT "so")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	SET(DYLIB_EXT "dll")
	SET(STATICLIB_EXT "lib")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	SET(DYLIB_EXT "dylib")
	SET(STATICLIB_EXT "a")
endif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")


macro(check_headers package_name header)
	if(EXISTS ${SYS_INCLDIR}/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
	elseif(EXISTS ../contrib/${ARGV0}/include/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
		include_directories(../contrib/${ARGV0}/include/)
	elseif(EXISTS ../contrib/${ARGV0}/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
		include_directories(../contrib/${ARGV0})
	elseif(EXISTS ../contrib/include/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
		if(NOT ${Added_contrIncl})
			include_directories(../contrib/include/)
			SET(Added_contrIncl 1)
		endif(NOT ${Added_contrIncl})
	else(EXISTS ${SYS_INCLDIR}/${ARGV1})
		SET(HEADERS_${ARGV0} 0)
	endif(EXISTS ${SYS_INCLDIR}/${ARGV1})
	
	if(HEADERS_${ARGV0})
		message(STATUS "searching headers for ${ARGV0} ... ok")
	else(HEADERS_${ARGV0})
		message(STATUS "searching headers for ${ARGV0} ... NOT found")
	endif(HEADERS_${ARGV0})
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
endmacro(check_headers name)


macro(check_lib package_name libname static)
	if(${ARGC} GREATER 2)
		if(${ARGV2} STREQUAL "static")
			set(LIB_EXT ${STATICLIB_EXT})
		else(${ARGV2} STREQUAL "static")
			set(LIB_EXT ${DYLIB_EXT})
		endif(${ARGV2} STREQUAL "static")
	endif(${ARGC} GREATER 2)
	
	if(EXISTS ${SYS_LIBDIR}/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
	elseif(EXISTS ../contrib/${ARGV0}/lib/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
		list(APPEND LIB_DIRS ../contrib/${ARGV0}/lib/)
	elseif(EXISTS ../contrib/${ARGV0}/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
		list(APPEND LIB_DIRS ../contrib/${ARGV0}/)
	elseif(EXISTS ../contrib/lib/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
		if(NOT ${Added_contrLib})
			list(APPEND LIB_DIRS ../contrib/lib/)
		endif(NOT ${Added_contrLib})
	else(EXISTS ${SYS_LIBDIR}/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 0)
	endif(EXISTS ${SYS_LIBDIR}/lib${ARGV1}.${LIB_EXT})
	
	if(LIB_${ARGV0})
		message(STATUS "searching lib${ARGV1} ... ok")
	else(LIB_${ARGV0})
		message(STATUS "searching lib${ARGV1} ... NOT found")
	endif(LIB_${ARGV0})
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
endmacro(check_lib name)


# search necessary libraries and headers
check_headers(gsl gsl/gsl_blas.h)
check_lib(gsl gsl static)
check_lib(gsl gslcblas static)
check_headers(glew GL/glew.h)
check_lib(glew GLEW static)
check_headers(Qt qt4/Qt/qstring.h)
check_lib(Qt QtCore  dynamic)
check_lib(Qt QtGui dynamic)
check_headers(boost boost/any.hpp)
check_lib(boost boost_system static)
check_lib(boost boost_system-mt static)
check_headers(libsvm svm.h)
check_lib(libsvm svm static)
check_headers(qwt qwt.h)
check_lib(qwt qwt static)

set(USE_lapack 1)


if(NOT USE_gsl OR NOT USE_boost)
	message(FATAL_ERROR "\nNecessary contrib-packages could not be found! Please fix this!")
endif(NOT USE_gsl OR NOT USE_boost)


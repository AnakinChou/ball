SET(Added_contrIncl 0)
SET(Added_contrLib 0)
get_cmake_property(var LIB_DIRS:UNINITIALIZED)
get_cmake_property(var INCL_DIRS:UNINITIALIZED)
get_cmake_property(var BIN_DIRS:UNINITIALIZED)

get_cmake_property(var GSL_INCL:UNINITIALIZED) 
get_cmake_property(var GSL_LIBS:UNINITIALIZED)
get_cmake_property(var GLEW_INCL:UNINITIALIZED)
get_cmake_property(var GLEW_LIBS:UNINITIALIZED)
get_cmake_property(var QT_INCL:UNINITIALIZED)
get_cmake_property(var QT_LIBS:UNINITIALIZED)
get_cmake_property(var BOOST_INCL:UNINITIALIZED)
get_cmake_property(var BOOST_LIBS:UNINITIALIZED)
get_cmake_property(var MOC:UNINITIALIZED)
get_cmake_property(var UIC:UNINITIALIZED)
get_cmake_property(var LAPACK_LIB:UNINITIALIZED)
get_cmake_property(var BLAS_LIB:UNINITIALIZED)
get_cmake_property(var DISABLE_VIEW:UNINITIALIZED)
get_cmake_property(var DISABLE_QUEASY:UNINITIALIZED)


# additional directories in which libs are to be searched. Specified by user on the command-line by '-DLIB_DIRS=...'
set(ADD_LIB_SEARCH_DIRS ${LIB_DIRS}) 

# additional directories in which header-files are to be searched. Specified by user on the command-line by '-DINCL_DIRS=...'
set(ADD_INCL_SEARCH_DIRS ${INCL_DIRS})

# additional directories in which binaries are to be searched (flex, bison, uic, ...). Specified by user on the command-line by '-DBIN_DIRS=...'
set(ADD_BIN_SEARCH_DIRS ${BIN_DIRS})

set(LIB_DIRS "")
set(INCL_DIRS "")
set(LIBS "")
include_directories(../include) # for BALL includes

#message(STATUS "LIB_SEARCH_DIRS="${LIB_SEARCH_DIRS})
#message(STATUS "INCL_SEARCH_DIRS="${INCL_SEARCH_DIRS})



if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	SET(DYLIB_EXT "so")
	SET(STATICLIB_EXT "a")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	SET(DYLIB_EXT "dll")
	SET(STATICLIB_EXT "lib")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	SET(DYLIB_EXT "dylib")
	SET(STATICLIB_EXT "a")
endif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")


#==== macros for search headers and libs ==================

macro(search_header package_name header)
	message(STATUS "looking for "${ARGV1})
	set(RES "RES-NOTFOUND")
	find_file(RES ${ARGV1} ${ADD_INCL_SEARCH_DIRS})
	if(NOT RES STREQUAL "RES-NOTFOUND")
		string(LENGTH ${ARGV1} size1)
		string(LENGTH ${RES} size2)
		math(EXPR size ${size2}-${size1})
		string(SUBSTRING ${RES} 0 ${size} path)
		set(found -1)
		list(FIND INCLUDE_DIRS ${path} found)
		if(${found} EQUAL -1)
			list(APPEND INCLUDE_DIRS ${path})
			include_directories(${path})
		endif(${found} EQUAL -1)
		SET(HEADERS_${ARGV0} 1)
	elseif(EXISTS ../contrib/${ARGV0}/include/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
		include_directories(../contrib/${ARGV0}/include/)
		list(APPEND INCLUDE_DIRS ../contrib/${ARGV0}/include/)
	elseif(EXISTS ../contrib/${ARGV0}/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
		include_directories(../contrib/${ARGV0})
		list(APPEND INCLUDE_DIRS ../contrib/${ARGV0})
	elseif(EXISTS ../contrib/include/${ARGV1})
		SET(HEADERS_${ARGV0} 1)
		if(NOT ${Added_contrIncl})
			include_directories(../contrib/include/)
			list(APPEND INCLUDE_DIRS ../contrib/include/)
			SET(Added_contrIncl 1)
		endif(NOT ${Added_contrIncl})
	else(NOT RES STREQUAL "RES-NOTFOUND")
		SET(HEADERS_${ARGV0} 0)
	endif(NOT RES STREQUAL "RES-NOTFOUND")
	
	if(HEADERS_${ARGV0})
		message(STATUS "searching headers for ${ARGV0} ... ok")
	else(HEADERS_${ARGV0})
		message(STATUS "searching headers for ${ARGV0} ... NOT found")
	endif(HEADERS_${ARGV0})
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
endmacro(search_header package_name header)


macro(search_lib package_name libname static)
	if(${ARGC} GREATER 2)
		if(${ARGV2} STREQUAL "static")
			set(LIB_EXT ${STATICLIB_EXT})
		else(${ARGV2} STREQUAL "static")
			set(LIB_EXT ${DYLIB_EXT})
		endif(${ARGV2} STREQUAL "static")
	endif(${ARGC} GREATER 2)
	
	set(RES "RES-NOTFOUND")
	set(name "lib${ARGV1}.${LIB_EXT}")
	find_library(RES ${name} ${ADD_LIB_SEARCH_DIRS})
	if(NOT RES STREQUAL "RES-NOTFOUND")
		string(LENGTH ${name} size1)
		string(LENGTH ${RES} size2)
		math(EXPR size ${size2}-${size1})
		string(SUBSTRING ${RES} 0 ${size} path)
		set(found -1)
		list(FIND LIB_DIRS ${path} found)
		if(${found} EQUAL -1)
			list(APPEND LIB_DIRS ${path})
		endif(${found} EQUAL -1)
		SET(LIB_${ARGV0} 1)
	elseif(EXISTS ../contrib/${ARGV0}/lib/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
		list(APPEND LIB_DIRS ../contrib/${ARGV0}/lib/)
	elseif(EXISTS ../contrib/${ARGV0}/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
		list(APPEND LIB_DIRS ../contrib/${ARGV0}/)
	elseif(EXISTS ../contrib/lib/lib${ARGV1}.${LIB_EXT})
		SET(LIB_${ARGV0} 1)
		if(NOT ${Added_contrLib})
			list(APPEND LIB_DIRS ../contrib/lib/)
		endif(NOT ${Added_contrLib})
	else(NOT RES STREQUAL "RES-NOTFOUND")
		SET(LIB_${ARGV0} 0)
	endif(NOT RES STREQUAL "RES-NOTFOUND")
	
	if(LIB_${ARGV0})
		message(STATUS "searching ${ARGV1} ... ok")
	else(LIB_${ARGV0})
		message(STATUS "searching ${ARGV1} ... NOT found")
	endif(LIB_${ARGV0})
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
		list(APPEND LIBS ${ARGV0})
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
endmacro(search_lib package_name libname static)


macro(check_header package_name header path)
	if(EXISTS ${ARGV2}/${ARGV1})
		set(HEADERS_${ARGV0} 1)
		set(found -1)
		list(FIND INCL_DIRS ${ARGV2} found)
		if(${found} EQUAL -1)
			list(APPEND INCL_DIRS ${ARGV2})
		endif(${found} EQUAL -1)
	else(EXISTS ${ARGV2}/${ARGV1})
		set(HEADERS_${ARGV0} 0)
	endif(EXISTS ${ARGV2}/${ARGV1})
endmacro(check_header package_name header path)


macro(check_lib package_name lib path)
	if(EXISTS ${ARGV2}/${ARGV1})
		set(LIB_${ARGV0} 1)
		set(found -1)
		list(FIND LIB_DIRS ${ARGV2} found)
		if(${found} EQUAL -1)
			list(APPEND LIB_DIRS ${ARGV2})
		endif(${found} EQUAL -1)
	else(EXISTS ${ARGV2}/${ARGV1})
		set(LIB_${ARGV0} 0)
	endif(EXISTS ${ARGV2}/${ARGV1})
endmacro(check_lib package_name lib path)


#==== search contrib libraries and headers ===========

search_header(gsl gsl/gsl_blas.h)
search_lib(gsl gsl static)
search_lib(gsl gslcblas static)
search_header(glew GL/glew.h)
search_lib(glew GLEW static)
search_header(Qt Qt/qstring.h)
search_lib(Qt QtCore dynamic)
search_lib(Qt QtGui dynamic)

if(NOT DEFINED BOOST_INCL)
	search_header(boost boost/asio.hpp)
else(NOT DEFINED BOOST_INCL)
	check_header(boost boost/asio.hpp ${BOOST_INCL})
endif(NOT DEFINED BOOST_INCL)


search_lib(boost boost_system-mt static)
if(NOT USE_boost)
	search_lib(boost boost_system static)
endif(NOT USE_boost)

search_header(libsvm svm.h)
search_lib(libsvm svm static)
search_header(qwt qwt.h)
search_lib(qwt qwt static)


if(NOT ${LIB_lapack} STREQUAL "")
	set(RES "RES-NOTFOUND")
	find_library(RES {LIB_lapack})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		set(LIB_lapack 1)
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
else(NOT ${LIB_lapack} STREQUAL "")
	search_lib(lapack lapack static)
endif(NOT ${LIB_lapack} STREQUAL "")

if(NOT ${LIB_blas} STREQUAL "")
	set(RES "RES-NOTFOUND")
	find_library(RES {LIB_blas})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		set(LIB_blas 1)
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
elseif(NOT ${LIB_blas} STREQUAL "")
	search_lib(blas blas static)
endif(NOT ${LIB_blas} STREQUAL "")

if(LIB_lapack)
	set(USE_lapack 1)
	if(NOT LIB_blas)
		# search blas-lib in lapack directory, since lapack is distributed with an own blas-version
		search_lib(lapack blas static)
		set(USE_lapack 1)
		set(LIB_blas ${LIB_lapack})
	endif(NOT LIB_blas)
endif(LIB_lapack)
if(LIB_blas)
	set(USE_blas 1)
endif(LIB_blas)




# ==== search flex, yacc, moc, uic ====================

if("${FLEX_EXECUTABLE}" STREQUAL "")
	set(RES "RES-NOTFOUND")
	find_file(RES flex ${ADD_BIN_SEARCH_DIRS})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		SET(FLEX_EXECUTABLE ${RES})
		message(STATUS "path to flex = "${RES})
	else(NOT ${RES} STREQUAL "RES-NOTFOUND")
		set(name "flex, The Fast Lexical Analyzer, http://flex.sourceforge.net/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
endif("${FLEX_EXECUTABLE}" STREQUAL "")

if("${YACC_EXECUTABLE}" STREQUAL "")
	set(RES "RES-NOTFOUND")
	find_file(RES bison ${ADD_BIN_SEARCH_DIRS})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		SET(YACC_EXECUTABLE bison -y)
		message(STATUS "path to bison = "${RES})
	else(NOT ${RES} STREQUAL "RES-NOTFOUND")
		find_file(RES yacc)
		if(NOT ${RES} STREQUAL "RES-NOTFOUND")
			SET(YACC_EXECUTABLE ${RES})
			message(STATUS "path to yacc = "${RES})
		else(NOT ${RES} STREQUAL "RES-NOTFOUND")
			set(name "  A Yacc-compatible parser generator, e.g. http://www.gnu.org/software/bison/")
			set(missing_packages ${missing_packages}${name}\n)
		endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
endif("${YACC_EXECUTABLE}" STREQUAL "")

if("${QT_MOC_EXECUTABLE}" STREQUAL "")
	set(RES "RES-NOTFOUND")
	set(name moc)
	if(NOT ${MOC} STREQUAL "")
		set(name ${MOC})
	endif(NOT ${MOC} STREQUAL "")
	find_file(RES ${name} ${ADD_BIN_SEARCH_DIRS})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		SET(QT_MOC_EXECUTABLE ${RES})
		message(STATUS "path to moc = "${RES})
	else(NOT ${RES} STREQUAL "RES-NOTFOUND")
		set(name "moc, Qt meta-object compiler")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
endif("${QT_MOC_EXECUTABLE}" STREQUAL "")

if("${QT_UIC_EXECUTABLE}" STREQUAL "")
	set(RES "RES-NOTFOUND")
	set(name uic)
	if(NOT ${UIC} STREQUAL "")
		set(name ${UIC})
	endif(NOT ${UIC} STREQUAL "")
	find_file(RES ${name} ${ADD_BIN_SEARCH_DIRS})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		SET(QT_UIC_EXECUTABLE ${RES})
		message(STATUS "path to uic = "${RES})
	else(NOT ${RES} STREQUAL "RES-NOTFOUND")
		set(name "uic, Qt user interface compiler")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
endif("${QT_UIC_EXECUTABLE}" STREQUAL "")



# ===== Complain if mandatory contrib packages are missing =======

set(missing_packages "")

if(NOT USE_gsl)
	set(name "  GSL, GNU Scientific Library, http://www.gnu.org/software/gsl/") 
	set(missing_packages ${missing_packages}${name}\n)
endif(NOT USE_gsl)

if(NOT USE_boost) 
	set(name "  Boost, C++ libraries, http://www.boost.org/")
	set(missing_packages ${missing_packages}${name}\n)
endif(NOT USE_boost)

if(NOT DISABLE_VIEW)
	if(NOT USE_Qt) 
		set(name "  Qt4, Cross-platform application and UI framework, http://www.qtsoftware.com/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_Qt)
endif(NOT DISABLE_VIEW)

if(NOT DISABLE_QUEASY)
	if(NOT USE_lapack)
		set(name "  Lapack library, Linear Algebra PACKage, http://www.netlib.org/lapack/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_lapack)
	
	if(NOT USE_blas)
		set(name "  BLAS library, Basic Linear Algebra Subprograms, e.g. http://www.netlib.org/blas/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_blas)
	
	if(NOT USE_qwt AND NOT DISABLE_VIEW AND NOT DISABLE_VIEW)
		set(name "  Qwt, Qt widgets for technical applications, http://qwt.sourceforge.net/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_qwt AND NOT DISABLE_VIEW AND NOT DISABLE_VIEW)
endif(NOT DISABLE_QUEASY)



#message(STATUS "includes ="${INCLUDE_DIRS})
#message(STATUS "libs ="${LIB_DIRS})


if(NOT ${missing_packages} STREQUAL "")
	message(FATAL_ERROR "\n==============================\nThe necessary contrib-packages\n${missing_packages}could not be found! Please install them first!\n==============================\n")
endif(NOT ${missing_packages} STREQUAL "")


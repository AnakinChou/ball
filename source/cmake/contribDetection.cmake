SET(Added_contrIncl 0)
SET(Added_contrLib 0)
get_cmake_property(var LIB_DIRS:UNINITIALIZED)
get_cmake_property(var INCL_DIRS:UNINITIALIZED)
get_cmake_property(var BIN_DIRS:UNINITIALIZED)

get_cmake_property(var GSL_INCL:UNINITIALIZED) 
get_cmake_property(var GSL_LIBS:UNINITIALIZED)
get_cmake_property(var GLEW_INCL:UNINITIALIZED)
get_cmake_property(var GLEW_LIBS:UNINITIALIZED)
get_cmake_property(var QT_INCL:UNINITIALIZED)
get_cmake_property(var QT_LIBS:UNINITIALIZED)
get_cmake_property(var BOOST_INCL:UNINITIALIZED)
get_cmake_property(var BOOST_LIBS:UNINITIALIZED)
get_cmake_property(var QWT_INCL:UNINITIALIZED)
get_cmake_property(var QWT_LIBS:UNINITIALIZED)
get_cmake_property(var SVM_INCL:UNINITIALIZED)
get_cmake_property(var SVM_LIBS:UNINITIALIZED)
get_cmake_property(var MOC:UNINITIALIZED)
get_cmake_property(var UIC:UNINITIALIZED)
get_cmake_property(var LAPACK_LIB:UNINITIALIZED)
get_cmake_property(var FORTRAN_LIB:UNINITIALIZED)
get_cmake_property(var BLAS_LIB:UNINITIALIZED)
get_cmake_property(var DISABLE_VIEW:UNINITIALIZED)
get_cmake_property(var DISABLE_QUEASY:UNINITIALIZED)


# additional directories in which libs are to be searched. Specified by user on the command-line by '-DLIB_DIRS=...'
set(ADD_LIB_SEARCH_DIRS ${LIB_DIRS}) 

# additional directories in which header-files are to be searched. Specified by user on the command-line by '-DINCL_DIRS=...'
set(ADD_INCL_SEARCH_DIRS ${INCL_DIRS})

# additional directories in which binaries are to be searched (flex, bison, uic, ...). Specified by user on the command-line by '-DBIN_DIRS=...'
set(ADD_BIN_SEARCH_DIRS ${BIN_DIRS})

set(LIB_DIRS "")
set(INCL_DIRS "")

# save pathes of dynamic libs, just in order to tell to user what needs to added to LD_LIBRARY_PATH
set(DY_LIB_DIRS "")

set(LIBS "")
include_directories(../include) # for BALL includes


if(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	SET(DYLIB_EXT "so")
	SET(STATICLIB_EXT "a")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	SET(DYLIB_EXT "dll")
	SET(STATICLIB_EXT "lib")
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	SET(DYLIB_EXT "dylib")
	SET(STATICLIB_EXT "a")
endif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")


#==== macros for search headers and libs ==================

macro(search_header package_name header)
	set(path "")
	set(RES "RES-NOTFOUND")
	find_file(RES ${ARGV1} ${ADD_INCL_SEARCH_DIRS})
	if(NOT RES STREQUAL "RES-NOTFOUND")
		string(LENGTH ${ARGV1} size1)
		string(LENGTH ${RES} size2)
		math(EXPR size ${size2}-${size1})
		string(SUBSTRING ${RES} 0 ${size} path)
		SET(HEADERS_${ARGV0} 1)
	elseif(EXISTS ../contrib/${ARGV0}/include/${ARGV1})
		set(path ../contrib/${ARGV0}/include/)
	elseif(EXISTS ../contrib/${ARGV0}/${ARGV1})
		set(path ../contrib/${ARGV0})
	elseif(EXISTS ../contrib/include/${ARGV1})
		set(path ../contrib/include/${ARGV1})
	else(NOT RES STREQUAL "RES-NOTFOUND")
		set(HEADERS_${ARGV0} 0)
	endif(NOT RES STREQUAL "RES-NOTFOUND")
	
	if(NOT ${path} STREQUAL "")
		SET(HEADERS_${ARGV0} 1)
		message(STATUS "searching headers for ${ARGV0}: ${path}/${header}")
		set(found -1)
		list(FIND INCLUDE_DIRS ${path} found)
		if(${found} EQUAL -1)
			list(APPEND INCLUDE_DIRS ${path})
			include_directories(${path})
			if(${ARGV0} STREQUAL "Qt")
				list(APPEND INCL_DIRS ${path}/QtCore)
				include_directories(${path}/QtCore)
				list(APPEND INCL_DIRS ${path}/QtGui)
				include_directories(${path}/QtGui)
			endif(${ARGV0} STREQUAL "Qt")
		endif(${found} EQUAL -1)
	else(NOT ${path} STREQUAL "")
		message(STATUS "searching headers for ${ARGV0}: NOT found")
	endif(NOT ${path} STREQUAL "")
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
endmacro(search_header package_name header)


macro(search_lib package_name libname static)
	if(${ARGC} GREATER 2)
		if(${ARGV2} STREQUAL "static")
			set(LIB_EXT ${STATICLIB_EXT})
		else(${ARGV2} STREQUAL "static")
			set(LIB_EXT ${DYLIB_EXT})
		endif(${ARGV2} STREQUAL "static")
	endif(${ARGC} GREATER 2)
	
	set(path "")
	set(RES "RES-NOTFOUND")
	set(name "lib${ARGV1}.${LIB_EXT}")
	find_library(RES ${name} ${ADD_LIB_SEARCH_DIRS})
	if(NOT RES STREQUAL "RES-NOTFOUND")
		string(LENGTH ${name} size1)
		string(LENGTH ${RES} size2)
		math(EXPR size ${size2}-${size1})
		string(SUBSTRING ${RES} 0 ${size} path)
	elseif(EXISTS ../contrib/${ARGV0}/lib/lib${ARGV1}.${LIB_EXT})
		set(path ../contrib/${ARGV0}/lib/)
	elseif(EXISTS ../contrib/${ARGV0}/lib${ARGV1}.${LIB_EXT})
		set(path ../contrib/${ARGV0}/)
	elseif(EXISTS ../contrib/lib/lib${ARGV1}.${LIB_EXT})
		set(path ../contrib/lib/)
	else(NOT RES STREQUAL "RES-NOTFOUND")
		SET(LIB_${ARGV0} 0)
	endif(NOT RES STREQUAL "RES-NOTFOUND")
	
	if(NOT ${path} STREQUAL "")
		list(APPEND LIBS ${name})
		set(found -1)
		list(FIND LIB_DIRS ${path} found)
		if(${found} EQUAL -1)
			list(APPEND LIB_DIRS ${path})
			if("${ARGV2}" STREQUAL "dynamic")
				string(REPLACE ".." "${PROJECT_SOURCE_DIR}/.." abs_path ${path})
				set(DY_LIB_DIRS "${DY_LIB_DIRS}  ${abs_path}")
			endif("${ARGV2}" STREQUAL "dynamic")
		endif(${found} EQUAL -1)
		SET(LIB_${ARGV0} 1)
		message(STATUS "searching ${name}: ${path}/${name}")
	else(NOT ${path} STREQUAL "")
		message(STATUS "searching ${name}: NOT found")
	endif(NOT ${path} STREQUAL "")
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
	
	# if static-lib is preferred but none could be found, look for dynamic lib instead
	if(NOT LIB_${ARGV0} AND ${ARGV2} STREQUAL "static")
		search_lib(${ARGV0} ${ARGV1} dynamic)
	endif(NOT LIB_${ARGV0} AND ${ARGV2} STREQUAL "static")
endmacro(search_lib package_name libname static)


macro(check_header package_name header path)
	if(EXISTS ${ARGV2}/${ARGV1})
		set(HEADERS_${ARGV0} 1)
		set(found -1)
		list(FIND INCL_DIRS ${ARGV2} found)
		message(STATUS "searching headers for ${ARGV0}: ${path}/${header}")
		if(${found} EQUAL -1)
			list(APPEND INCL_DIRS ${ARGV2})
			include_directories(${ARGV2})
			if(${ARGV0} STREQUAL "Qt")
				list(APPEND INCL_DIRS ${ARGV2}/QtCore)
				include_directories(${ARGV2}/QtCore)
				list(APPEND INCL_DIRS ${ARGV2}/QtGui)
				include_directories(${ARGV2}/QtGui)
			endif(${ARGV0} STREQUAL "Qt")
		endif(${found} EQUAL -1)
	else(EXISTS ${ARGV2}/${ARGV1})
		set(HEADERS_${ARGV0} 0)
		message(STATUS "searching headers for ${ARGV0}: NOT found")
	endif(EXISTS ${ARGV2}/${ARGV1})
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
endmacro(check_header package_name header path)


macro(check_lib package_name lib static path)
	if(${ARGV2} STREQUAL "static")
		set(LIB_EXT ${STATICLIB_EXT})
	else(${ARGV2} STREQUAL "static")
		set(LIB_EXT ${DYLIB_EXT})
	endif(${ARGV2} STREQUAL "static")
	
	set(name "lib${ARGV1}.${LIB_EXT}")
	if(EXISTS ${ARGV3}/${name})
		set(LIB_${ARGV0} 1)
		list(APPEND LIBS ${ARGV1})
		message(STATUS "searching ${name}: ${path}/${name}")
		set(found -1)
		list(FIND LIB_DIRS ${ARGV2} found)
		if(${found} EQUAL -1)
			list(APPEND LIB_DIRS ${name})
			if("${ARGV2}" STREQUAL "dynamic")
				string(REPLACE ".." "${PROJECT_SOURCE_DIR}/.." abs_path ${path})
				set(DY_LIB_DIRS "${DY_LIB_DIRS}  ${abs_path}")
			endif("${ARGV2}" STREQUAL "dynamic")
		endif(${found} EQUAL -1)
	
	#check whether a full path (including file name) was given
	else(EXISTS ${ARGV3}/${name})
		set(LIB_${ARGV0} 0)
		message(STATUS "searching ${name}: NOT found")
	endif(EXISTS ${ARGV3}/${name})
	
	if(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 1)
	else(HEADERS_${ARGV0} AND LIB_${ARGV0})
		set(USE_${ARGV0} 0)
	endif(HEADERS_${ARGV0} AND LIB_${ARGV0})
	
	# if static-lib is preferred but none could be found, look for dynamic lib instead
	if(NOT LIB_${ARGV0} AND ${ARGV2} STREQUAL "static")
		check_lib(${ARGV0} ${ARGV1} dynamic ${ARGV3})
	endif(NOT LIB_${ARGV0} AND ${ARGV2} STREQUAL "static")
endmacro(check_lib package_name lib static path)


#==== search contrib libraries and headers ===========

if(NOT DEFINED GSL_INCL)
	search_header(gsl gsl/gsl_blas.h)
elseif(NOT DEFINED GSL_INCL)
	check_header(gsl gsl/gsl_blas.h ${GSL_INCL})
endif(NOT DEFINED GSL_INCL)

if(NOT DEFINED GSL_LIBS)
	search_lib(gsl gsl static)
	search_lib(gsl gslcblas static)
else(NOT DEFINED GSL_LIBS)
	check_lib(gsl gsl static ${GSL_LIBS})
	check_lib(gsl gslcblas static ${GSL_LIBS})
endif(NOT DEFINED GSL_LIBS)

if(NOT DEFINED GLEW_INCL)
	search_header(glew GL/glew.h)
else(NOT DEFINED GLEW_INCL)
	check_header(glew GLEW static ${GLEW_INCL})
endif(NOT DEFINED GLEW_INCL)

if(NOT DEFINED GLEW_LIBS)
	search_lib(glew GLEW static)
else(NOT DEFINED GLEW_LIBS)
	check_lib(glew GLEW static ${GLEW_LIBS})
endif(NOT DEFINED GLEW_LIBS)

if(NOT DEFINED QT_INCL)
	search_header(Qt Qt/qstring.h)
else(NOT DEFINED QT_INCL)
	check_header(Qt Qt/qstring.h ${QT_INCL})
endif(NOT DEFINED QT_INCL)

if(NOT DEFINED QT_LIBS)
	search_lib(Qt QtCore dynamic)
	search_lib(Qt QtGui dynamic)
else(NOT DEFINED QT_LIBS)
	check_lib(Qt QtCore dynamic ${QT_LIBS})
	check_lib(Qt QtGui dynamic ${QT_LIBS})
endif(NOT DEFINED QT_LIBS)

if(NOT DEFINED BOOST_INCL)
	search_header(boost boost/asio.hpp)
else(NOT DEFINED BOOST_INCL)
	check_header(boost boost/asio.hpp ${BOOST_INCL})
endif(NOT DEFINED BOOST_INCL)

if(NOT DEFINED BOOST_LIBS)
	search_lib(boost boost_system-mt static)
	if(NOT USE_boost)
		search_lib(boost boost_system static)
	endif(NOT USE_boost)
else(NOT DEFINED BOOST_LIBS)
	check_lib(boost boost_system-mt static ${BOOST_LIBS})
	if(NOT USE_boost)
		check_lib(boost boost_system static ${BOOST_LIBS})
	endif(NOT USE_boost)
endif(NOT DEFINED BOOST_LIBS)

if(NOT DEFINED SVM_INCL)
	search_header(libsvm svm.h)
else(NOT DEFINED SVM_INCL)
	check_header(libsvm svm.h ${SVM_INCL})
endif(NOT DEFINED SVM_INCL)

if(NOT DEFINED SVM_LIBS)
	search_lib(libsvm svm static)
else(NOT DEFINED SVM_LIBS)
	check_lib(libsvm svm static ${SVM_LIBS})
endif(NOT DEFINED SVM_LIBS)

if(NOT DEFINED QWT_INCL)
	search_header(qwt qwt.h)
else(NOT DEFINED QWT_INCL)
	check_header(qwt qwt.h ${QWT_INCL})
endif(NOT DEFINED QWT_INCL)

if(NOT DEFINED QWT_LIBS)
	search_lib(qwt qwt static)
else(NOT DEFINED QWT_LIBS)
	check_lib(qwt qwt static ${QWT_LIBS})
endif(NOT DEFINED QWT_LIBS)

if(NOT DEFINED LAPACK_LIB)
	search_lib(lapack lapack static)
else(NOT DEFINED LAPACK_LIB)
	check_lib(lapack lapack static ${LAPACK_LIB})
endif(NOT DEFINED LAPACK_LIB)

if(NOT DEFINED BLAS_LIB)
	search_lib(blas blas static)
else(NOT DEFINED BLAS_LIB)
	check_lib(blas blas static ${BLAS_LIB})
endif(NOT DEFINED BLAS_LIB)

if(LIB_lapack)
	set(USE_lapack 1)
	if(NOT LIB_blas)
		# search blas-lib in lapack directory, since lapack is distributed with an own blas-version
		if(NOT DEFINED LAPACK_LIB)
			search_lib(lapack blas static)
			set(USE_lapack 1)
			set(LIB_blas ${LIB_lapack})
		else(NOT DEFINED LAPACK_LIB)
			check_lib(blas blas static ${LAPACK_LIB})
		endif(NOT DEFINED LAPACK_LIB)
	endif(NOT LIB_blas)
	
	if(NOT DEFINED FORTRAN_LIB)
		search_lib(fortran gfortran static)
	else(NOT DEFINED FORTRAN_LIB)
		check_lib(fortran gfortran static ${FORTRAN_LIB})
	endif(NOT DEFINED FORTRAN_LIB)
endif(LIB_lapack)
if(LIB_blas)
	set(USE_blas 1)
endif(LIB_blas)




# ==== search flex, yacc, moc, uic ====================

if("${FLEX_EXECUTABLE}" STREQUAL "")
	set(RES "RES-NOTFOUND")
	find_file(RES flex ${ADD_BIN_SEARCH_DIRS})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		SET(FLEX_EXECUTABLE ${RES})
		message(STATUS "path to flex = "${RES})
	else(NOT ${RES} STREQUAL "RES-NOTFOUND")
		set(name "flex, The Fast Lexical Analyzer, http://flex.sourceforge.net/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
endif("${FLEX_EXECUTABLE}" STREQUAL "")

if("${YACC_EXECUTABLE}" STREQUAL "")
	set(RES "RES-NOTFOUND")
	find_file(RES bison ${ADD_BIN_SEARCH_DIRS})
	if(NOT ${RES} STREQUAL "RES-NOTFOUND")
		SET(YACC_EXECUTABLE bison -y)
		message(STATUS "path to bison = "${RES})
	else(NOT ${RES} STREQUAL "RES-NOTFOUND")
		find_file(RES yacc)
		if(NOT ${RES} STREQUAL "RES-NOTFOUND")
			SET(YACC_EXECUTABLE ${RES})
			message(STATUS "path to yacc = "${RES})
		else(NOT ${RES} STREQUAL "RES-NOTFOUND")
			set(name "  A Yacc-compatible parser generator, e.g. http://www.gnu.org/software/bison/")
			set(missing_packages ${missing_packages}${name}\n)
		endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
	endif(NOT ${RES} STREQUAL "RES-NOTFOUND")
endif("${YACC_EXECUTABLE}" STREQUAL "")

if("${QT_MOC_EXECUTABLE}" STREQUAL "")
	if(NOT "${MOC}" STREQUAL "")
		if(EXISTS ${MOC})
			SET(QT_MOC_EXECUTABLE ${MOC})
			message(STATUS "path to moc = "${MOC})
		endif(EXISTS ${MOC})
	else(NOT "${MOC}" STREQUAL "")
		set(RES "RES-NOTFOUND")
		find_file(RES moc ${ADD_BIN_SEARCH_DIRS})
		if(NOT "${RES}" STREQUAL "RES-NOTFOUND")
			SET(QT_MOC_EXECUTABLE ${RES})
			message(STATUS "path to moc = "${RES})
		else(NOT "${RES}" STREQUAL "RES-NOTFOUND")
			set(name "moc, Qt meta-object compiler")
			set(missing_packages ${missing_packages}${name}\n)
		endif(NOT "${RES}" STREQUAL "RES-NOTFOUND")
	endif(NOT "${MOC}" STREQUAL "")
endif("${QT_MOC_EXECUTABLE}" STREQUAL "")

if("${QT_UIC_EXECUTABLE}" STREQUAL "")
	if(NOT "${UIC}" STREQUAL "")
		if(EXISTS ${UIC})
			SET(QT_UIC_EXECUTABLE ${UIC})
			message(STATUS "path to uic = "${UIC})
		endif(EXISTS ${UIC})
	else(NOT "${UIC}" STREQUAL "")
		set(RES "RES-NOTFOUND")
		find_file(RES uic ${ADD_BIN_SEARCH_DIRS})
		if(NOT "${RES}" STREQUAL "RES-NOTFOUND")
			SET(QT_UIC_EXECUTABLE ${RES})
			message(STATUS "path to moc = "${RES})
		else(NOT "${RES}" STREQUAL "RES-NOTFOUND")
			set(name "uic, Qt user interface compiler")
			set(missing_packages ${missing_packages}${name}\n)
		endif(NOT "${RES}" STREQUAL "RES-NOTFOUND")
	endif(NOT "${UIC}" STREQUAL "")
endif("${QT_UIC_EXECUTABLE}" STREQUAL "")


# ===== Complain if mandatory contrib packages are missing =======

set(missing_packages "")

if(NOT USE_gsl)
	set(name "  GSL, GNU Scientific Library, http://www.gnu.org/software/gsl/") 
	set(missing_packages ${missing_packages}${name}\n)
endif(NOT USE_gsl)

if(NOT USE_boost) 
	set(name "  Boost, C++ libraries, http://www.boost.org/")
	set(missing_packages ${missing_packages}${name}\n)
endif(NOT USE_boost)

if(NOT DISABLE_VIEW)
	if(NOT USE_Qt) 
		set(name "  Qt4, Cross-platform application and UI framework, http://www.qtsoftware.com/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_Qt)
endif(NOT DISABLE_VIEW)

if(NOT DISABLE_QUEASY)
	if(NOT USE_lapack)
		set(name "  Lapack library, Linear Algebra PACKage, http://www.netlib.org/lapack/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_lapack)
		
	if(NOT LIB_fortran)
		set(name "  fortran library, needed for linking against Lapack lib")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT LIB_fortran)
	
	if(NOT USE_blas)
		set(name "  BLAS library, Basic Linear Algebra Subprograms, e.g. http://www.netlib.org/blas/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_blas)
	
	if(NOT USE_qwt AND NOT DISABLE_VIEW)
		set(name "  Qwt, Qt widgets for technical applications, http://qwt.sourceforge.net/")
		set(missing_packages ${missing_packages}${name}\n)
	endif(NOT USE_qwt AND NOT DISABLE_VIEW)
endif(NOT DISABLE_QUEASY)


if(NOT ${missing_packages} STREQUAL "")
	message(FATAL_ERROR "\n==============================\nThe necessary contrib-packages\n${missing_packages}could not be found! Please install them respectively specify the pathes to them!\n==============================\n")
endif(NOT ${missing_packages} STREQUAL "")

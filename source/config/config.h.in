
// here are some global configuration flags for BALL

// this flag is used by GenericPDBFile
// if it is not set, the length of each line has
// to be meet the PDB spcifications exactly.
// As virtually no existing PDB file fulfills
// this requirement, we disencourage its usage.
// Nevertheless, it can be quite useful for debugging.
#undef BALL_STRICT_PDB_LINE_IMPORT

// BALL_DEBUG enables some debugging methods
// change the DEBUG entry in configure to define this flag.
// If in debug mode, inline functions won't be compiled
// as inline by defining BALL_NO_INLINE_FUNCTIONS
// This facilitates debugging, as the debugger can always
// find the corresponding source code line.
// See also COMMON/debug.h for these symbols.
#undef BALL_DEBUG
#undef BALL_NO_INLINE_FUNCTIONS


// this define is used to determine
// wheter BALL shall try to close a socket conection
// via shutdown or close
// (see socket.C)
#define BALL_USE_SOCKET_SHUTDOWN

// these two flags are set by configure according to 
// the OS and compiler found. HAS_BOOL_TYPE and 
// _CC_BOOL_DEF_ are required for compatibility
// reasons with QT.

// the path to the directory where BALL is installed
#define BALL_PATH "BALL"

// used in COMMON/namespace.h to cause the inclusion of COMMON/memory.h
#undef BALL_LOG_MEMORY
#define BALL_LOG_MEMORY_FILE "memory.log"

// undef this symbol to disable the usage
// of the ObjectManager (refer to the documentation
// for details)
#define BALL_SUPPORT_OBJECT_MANAGER

// define architecture
#undef SPARC
#undef MIPS
#undef I386
#undef ALPHA

//define OS
#undef LINUX
#undef SOLARIS
#undef SUNOS
#undef IRIX
#undef IRIX32
#undef IRIX64


// Define if you have the inet_aton function.  
// Note: inet_aton is a marginally improved version of inet_addr
// If configure finds inet_aton, HAVE_INET_ATON is set and used
// in SYSTEM/socket.C.
#undef HAVE_INET_ATON

// Define the type needed for getsockname, getpeername, and accept
// This type is probably one of socklen_t, size_t, or int
// Refer to /usr/include/sys/socket.h in case of doubt
#define BALL_SOCKLEN_TYPE int

// define some symbols for the size of some variables
#define BALL_INT_SIZE 32
#define BALL_LONG_SIZE 32
#define BALL_SIZE_T_SIZE 32
#define BALL_POINTER_SIZE 32

// on some systems (e.g. Solaris) we need to include /usr/include/ieeefp.h
// for some floating point functions
#undef BALL_INCLUDE_IEEEFP

// Define to `int' if <sys/types.h> doesn't define.  
#undef pid_t

// Define to `unsigned' if <sys/types.h> doesn't define.  
#undef size_t

// Define if you have the ANSI C header files.  
#undef STDC_HEADERS

// Define if numeric_limits is defined in <limits>
#undef HAVE_NUMERIC_LIMITS

// Defines an integer type that has the same length as void*
#define BALL_POINTERSIZE_INT int

// Defines an unsigned type that has the same length as size_t
#define BALL_SIZE_TYPE int

// Defines a signed type that has the same length as size_t
#define BALL_INDEX_TYPE int

// Define the template argument for friends of template classes:
// either "" or "<>"
#define BALL_NULL_TEMPLATE_ARGS ""

// Define whether the compiler provides an ANSI-compliant implementation
// of <iostream>. This is required in COMMON/socket.h/C since we need
// the correct initialisation of the base classes. These base classes are
// either something like std::basic_ios<char> etc., or ios, istream etc.
#undef BALL_HAS_ANSI_IOSTREAM


// Define whether to use the ARM style or ANSI style access modifications
//   ARM style:   BaseClass::foo;
//   ANSI style:  using BaseClass::foo;
#undef BALL_CFG_USING_METHOD_DIRECTIVE

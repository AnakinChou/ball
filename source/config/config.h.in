// -*- Mode: C++; tab-width: 2; -*-
// vi: set ts=2:

#ifndef BALL_CONFIG_CONFIG_H
#define BALL_CONFIG_CONFIG_H

// Here are some global configuration flags for BALL

// BALL_DEBUG enables some debugging methods
// change the DEBUG entry in configure to define this flag.
// If in debug mode, inline functions won't be compiled
// as inline by defining BALL_NO_INLINE_FUNCTIONS
// This facilitates debugging, as the debugger can always
// find the corresponding source code line.
// See also COMMON/debug.h for these symbols.
#undef BALL_DEBUG
#undef BALL_NO_INLINE_FUNCTIONS

// The path to the directory where BALL is installed.
#undef BALL_PATH ""
#define BALL_DATA_PATH BALL_PATH"/data/";

// The string describes the binary format.
#undef BALL_BINFMT ""

// The processor architecture
#undef BALL_ARCH ""

// The operating system
#undef BALL_OS ""

// Some convenient shortcuts for operating systems we often encounter
// NOTE: we'd like to deprecate these, so try using BALL_OS instead
// whenever possible
#undef BALL_OS_LINUX
#undef BALL_OS_SOLARIS
#undef BALL_OS_SUNOS
#undef BALL_OS_IRIX
#undef BALL_OS_FREEBSD
#undef BALL_OS_NETBSD
#undef BALL_OS_OPENBSD
#undef BALL_OS_DARWIN
#undef BALL_OS_WINDOWS

// Deprecated, only for compatibility
#undef BALL_PLATFORM_WINDOWS

// Define compiler specifics

// Microsoft Visual Studio .NET
#undef BALL_COMPILER_MSVC
// GNU g++
#undef BALL_COMPILER_GXX
// Intel C++
#undef BALL_COMPILER_INTEL

// The compiler name.
#undef BALL_COMPILER ""

// Defines for the compiler version (major.minor.minor_minor)
#undef BALL_COMPILER_VERSION 
#undef BALL_COMPILER_VERSION_MAJOR  
#undef BALL_COMPILER_VERSION_MINOR 
#undef BALL_COMPILER_VERSION_MINOR_MINOR 

// define symbols for the endianness of the system
#undef BALL_LITTLE_ENDIAN
#undef BALL_BIG_ENDIAN

// Type sizes

// This flag is defined on 64bit architectures
#undef BALL_64BIT_ARCHITECTURE

// define some symbols for the (bit)size of some builtin types
#undef BALL_INT_SIZE 
#undef BALL_CHAR_SIZE 
#undef BALL_LONG_SIZE 
#undef BALL_SIZE_T_SIZE 
#undef BALL_POINTER_SIZE 

// Define a signed/unsigned numeric type of 64 bit length (used for
// platform independent persistence: stores pointers)
// this usually defaults to unsigned long on 64 bit architectures
// and unsigned long long on 32 bit machines
#undef BALL_ULONG64_TYPE 
#undef BALL_LONG64_TYPE 

// Defines an unsigned integer type of the same size as void*
#undef BALL_POINTERSIZEUINT_TYPE 

// Defines an unsigned type that has the same length as size_t
#undef BALL_SIZE_TYPE 

// Defines a signed type that has the same length as size_t
#undef BALL_INDEX_TYPE 

// Define the precision for the BALL Complex type. 
#undef BALL_COMPLEX_PRECISION 

// System header information
#undef BALL_HAS_UNISTD_H
#undef BALL_HAS_PROCESS_H
#undef BALL_HAS_TIME_H
#undef BALL_HAS_LIMITS_H
#undef BALL_HAS_DIRENT_H
#undef BALL_HAS_DIRECT_H
#undef BALL_HAS_PWD_H
#undef BALL_HAS_STDINT_H

#undef BALL_HAS_SYS_IOCTL_H
#undef BALL_HAS_SYS_TIME_H
#undef BALL_HAS_SYS_STAT_H
#undef BALL_HAS_SYS_TIMES_H
#undef BALL_HAS_SYS_TYPES_H
#undef BALL_HAS_SYS_PARAM_H
#undef BALL_HAS_SYS_SOCKET_H
#undef BALL_HAS_SYS_SYSINFO_H

// Define whether float.h has to be included along with limits.h
#undef BALL_HAS_FLOAT_H 

// Define if numeric_limits is defined in <limits>
#undef BALL_HAS_NUMERIC_LIMITS

#undef BALL_HAS_REGEX_H

#undef BALL_HAS_NETINET_IN_H
#undef BALL_HAS_NETDB_H

// Some systems don't provide mode_t for us...
#undef mode_t 

// Define whether we can use <sstream> or whether we have to use the
// older <strstream>
#undef BALL_HAS_SSTREAM

// on some systems (e.g. Solaris) we need to include /usr/include/ieeefp.h
// for some floating point functions
#undef BALL_HAS_IEEEFP_H

// on some systems (e.g. Solaris) we need to include /usr/include/values.h
// for some floating point functions
#undef BALL_HAS_VALUES_H

#undef BALL_HAS_KILL
#undef BALL_HAS_SYSCONF

// Specific to the Windows port
#ifdef BALL_OS_WINDOWS
#define BALL_HAS_WINDOWS_PERFORMANCE_COUNTER
#define BALL_USE_WINSOCK

// MS VC++ doesn't define all required symbols in 
// math.h if this symbol isn't defined *before* including
// math.h for the first time!
#define _USE_MATH_DEFINES 

// Keep Windows from defining min/max, ERROR,... as preprocesor symbols!
// May he how thought of defining these by default rot in hell!
#ifndef NOMINMAX
#	define NOMINMAX 1
#endif

#define NOGDI
#define NOWINRES

#define WINDOWS_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN

#endif // BALL_OS_WINDOWS

// Define whether the compiler provides an ANSI-compliant implementation
// of <iostream>. This is required in COMMON/socket.h/C since we need
// the correct initialisation of the base classes. These base classes are
// either something like std::basic_ios<char> etc., or ios, istream etc.
#undef BALL_HAS_ANSI_IOSTREAM

// Define whether inline functions may be used as template parameters.
#undef BALL_HAS_INLINE_TPL_ARGS

// tr1 related variables

// Do we have an unordered_map, and if so, where?
#undef BALL_HAS_UNORDERED_MAP
#undef BALL_HAS_HASH_MAP

#undef BALL_HAS_STD_UNORDERED_MAP
#undef BALL_HAS_TR1_UNORDERED_MAP
#undef BALL_HAS_BOOST_UNORDERED_MAP

#undef BALL_MAP_NAMESPACE 
#undef BALL_MAP_NAME 

// Defines the prefix needed when including extensions to the stl
#undef BALL_EXT_INCLUDE_PREFIX 

// Defines if extensions to hash must be defined in namespace std
#undef BALL_EXTEND_HASH_IN_STD_NS

// Defines whether the HashMap already provides LongSize hashing
#undef BALL_NEEDS_LONGSIZE_HASH

// This define is used in string.C and enables a workaround
// on those poor systems that do not define vsnprintf.
#undef BALL_HAVE_VSNPRINTF

// This flag is used by GenericPDBFile
// if it is not set, the length of each line has
// to meet the PDB spcifications exactly.
// As virtually no existing PDB file fulfills
// this requirement, we disencourage its usage.
// Nevertheless, it can be quite useful for debugging.
#undef BALL_STRICT_PDB_LINE_IMPORT

// the signature of the function arguments used in xdrrec_create differs
// from platform to platform, so we define some symbols describing the
// correct arguments: (void*, char*, int), (char*, char*, int), or (void)
// take arguments of type (void*, char*, int)
#undef BALL_XDRREC_CREATE_CHAR_CHAR_INT 
#undef BALL_XDRREC_CREATE_VOID_VOID_INT 
#undef BALL_XDRREC_CREATE_VOID_CHAR_INT 
#undef BALL_XDRREC_CREATE_VOID_VOID_UINT 
#undef BALL_XDRREC_CREATE_VOID 

// some platforms do not provide xdr_u_hyper, so we need a workaround for this
#undef BALL_HAS_XDR_U_HYPER 

// Define the argument type for xdr_u_hyper (64 bit)
#undef BALL_XDR_UINT64_TYPE 

// boost

// defined if we have boost::system support
#undef BALL_HAS_BOOST_SYSTEM

// defined if we have boost::iostreams support
#undef BALL_HAS_BOOST_IOSTREAMS

// defined if we have boost::thread support
#undef BALL_HAS_BOOST_THREAD

// defined if asio is taken from boost
#undef BALL_HAS_BOOST_ASIO

// defined if BALL was configured with asio support
#undef BALL_HAS_ASIO

// the namespace to use for asio
#undef BALL_ASIO_NAMESPACE 

// Define whether the FFTW library/header is available.
#undef BALL_HAS_FFTW
#undef BALL_HAS_FFTW_H

// Define which versions of fftw can be used: double, float, long double
#undef BALL_HAS_FFTW_DOUBLE
#undef BALL_HAS_FFTW_FLOAT
#undef BALL_HAS_FFTW_LONG_DOUBLE

// The default traits for the FFTW classes
#undef BALL_FFTW_DEFAULT_TRAITS 

// Define whether BALL was built with lpsolve support
#undef BALL_HAS_LPSOLVE

// VIEW related options
// Define whether BALL was built with rtfact support
#undef BALL_HAS_RTFACT

// QT options
#undef BALL_HAS_VIEW

// QT options
#define BALL_QT_HAS_THREADS // Qt now always has thread support
#define QT_THREAD_SUPPORT

// Glew
#undef BALL_HAS_GLEW

// Define for activated PYTHON support
#undef BALL_PYTHON_SUPPORT

// Maximum line length for reading from files (see source/FORMAT)
#define BALL_MAX_LINE_LENGTH 65535

#endif // BALL_CONFIG_CONFIG_H

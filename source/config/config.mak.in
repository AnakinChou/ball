# This is config.mak.in/config.mak
# Please do ONLY change config.mak.in, as config.mak is automagically 
# created by configure from config.mak.in
#
# RCS ID: $Id: config.mak.in,v 1.22.4.1 2002/08/09 11:10:03 oliver Exp $
#
# author:    $author$
# date:      $date$
# revision:  $rev$
#

# First, some basic unix commands, including the C++ compiler
#

# archiver ar (to create static libraries)
AR	=@AR@

# dynamic archiver (to create shared libraries)
DYNAR = @DYNAR@

# options for library generation
AROPTS  = @AROPTS@

# options for shared library generation
DYNAROPTS = @DYNAROPTS@

# suffix of shared library filenames
SHARED_LIB_SUFFIX = @SHARED_LIB_SUFFIX@
 
# C++ compiler
CXX=@CXX@
# unix command rm, used to remove obsolete files (target clean)
RM=@RM@
# unix command cp, used to copy files
CP=@CP@
# unix command mv, used to install libraries (target install.*)
MV=@MV@
# unix command strip, used to strip away unused stuff from object files
STRIP=@STRIP@
# the echo command (on some platforms with an additional -e to expand '\n')
ECHO=@ECHO_COMMAND@
# flex and bison
LEX	=@LEX@
YACC=@YACC@

OS	     =@OS@
# name of your OS
OSREV	   =@OSREV@
# full revision number
OSMAJOR	 =@OSMAJOR@
# major revision number (full revision number cut at the first dot)
BINFMT   =@BINFMT@
# binary format type (platform-architecture-compiler)

# BALL_PATH is the BALL root directory (the directory in which include and source reside)
# BALL_INCLUDES contains compiler flags to set the BALL include paths
# and BALL_LIBS is set to $BALL_PATH/lib/$BINFMT
#
BALL_PATH		    = @BALL_PATH@
BALL_INCLUDES		= @BALL_INCLUDES@
BALL_LIBS       = @BALL_LIBS@

# USE_BALLVIEW contains true if BALLVIEW support is to be built, false otherwise
# BALLVIEW_PLATFORM either contains Mesa or OpenGL (so far)
#
USE_BALLVIEW		    = @USE_BALLVIEW@
BALLVIEW_PLATFORM 	= @BALLVIEW_PLATFORM@
BALLVIEW_INCLUDES	  = @BALLVIEW_INCLUDES@
BALLVIEW_LIBS		    = @BALLVIEW_LIBS@
BALL_HAS_XDR				= @BALL_HAS_XDR@
BALL_HAS_FFTW       = @BALL_HAS_FFTW@
BALL_HAS_FLEX_YACC	= @BALL_HAS_FLEX_YACC@
OPENGL_LIBPATH      = @OPENGL_LIBPATH@
OPENGL_LIBOPTS      = @OPENGL_LIBOPTS@
QT_LIBPATH          = @QT_LIBPATH@
QT_LIBOPTS          = @QT_LIBOPTS@
MOC                 = @MOC@
X11_LIBPATH         = @X11_LIBPATH@
X11_LIBOPTS         = @X11_LIBOPTS@
X11_LIBS            = @X11_LIBS@
SIP            			= @SIP@
SIP_LIB        			= @SIP_LIB@
SIP_INCLUDES   			= @SIP_INCLUDES@
PYTHON_INCLUDES			= @PYTHON_INCLUDES@
PYTHON_SUPPORT      = @PYTHON_SUPPORT@ 
PYTHON_LIBS					= @PYTHON_LIBS@

# These are standard flags. CXXFLAGS to compile, LDFLAGS to link programs
# DEFINES and DEBUG are both part of CXXFLAGS
# ADD_CXXFLAGS are also passed on to the C++ compiler
# but are NOT passed on to makedepend
# This is the place for compiler options that are not understood
# by makedepend (e.g. -Olimit using IRIX DCC)
#
CXXFLAGS		    = @CXXFLAGS@ @BINFMT_INDEX@
LDFLAGS			    = @LDFLAGS@
ADD_CXXFLAGS		= @ADD_CXXFLAGS@

# all the libraries in linker usable format (-l..)
LIBS			= @LIBS@
#
DEFINES   = @DEFINES@
#
CXXFLAGS_D		= @CXXFLAGS_D@
CXXFLAGS_O		= @CXXFLAGS_O@

#
# additional CXXFLAGS for building library objects
LIB_CXXFLAGS = @LIB_CXXFLAGS@

#
# additional CXXFLAGS for building applications, tests, examples
# used instead of LIB_CXXFLAGS in APPLICATIONS, EXAMPLES, TEST, BENCHMARKS
NONLIB_CXXFLAGS = @NONLIB_CXXFLAGS@

# MODE_FLAGS is set to DEBUG_FLAGS or OPTIMIZE_FLAGS, this
# can be controlled by specifying the configure switch 
# --enable-optimization
CPP_MODE_FLAGS	= @CPP_MODE_FLAGS@

# CPP_MODE_FLAGS_NO_OPTIMIZATION is used in the (luckily quite rare!)
# cases where the compiler crashes when performing optimization.
# In this case, the source files will be compiled using CPP_MODE_FLAGS_NO_OPTIMIZATION
# instead of CPP_MODE_FLAGS
CPP_MODE_FLAGS_NO_OPTIMIZATION = @CPP_MODE_FLAGS_NO_OPTIMIZATION@

# if g++ is used, configure tries to determine its standard include directories
# this is used to prevent trouble when calling makedepend. Otherwise makedepend
# will produce loads of (irrelevant) warnings
STD_CPP_INCLUDES	= @STD_CPP_INCLUDES@

#  These are the major source directories.
#  They are entered in this order and "make all" is executed.
#  To build the library each of these directories is entered und "make libadd" is executed
#  to add the subdirectories' objects to the library.
#
DIRS	= @SUBDIRS@

#	C++ sources use suffix .C, .y for BISON, .l for FLEX
#
.SUFFIXES: .C .y .l .o

# Rule to create .o files from .C files
#
.C.o:
	$(CXX) $(CXXFLAGS) $(ADD_CXXFLAGS) $(CPP_MODE_FLAGS) $(LIB_CXXFLAGS) $(BALL_INCLUDES) $(ADD_INCLUDES) -c $*.C -o $@

# Rule to create .C files from the BISON .y files
#
.y.C:
	$(YACC) -p $(PARSER_PREFIX) -d $*.y && $(MV) y.tab.h $*.h && $(MV) y.tab.c $@

# Rule to create .C files from the FLEX .l files
#
.l.C:
	$(LEX) -P$(PARSER_PREFIX) -o$@ $*.l
